<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="robocafe" class="ptolemy.actor.TypedCompositeActor">
    <property name="Rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1305.0, 670.0]">
        </property>
        <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="2.0">
        </property>
        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="width" class="ptolemy.data.expr.Parameter" value="750.0000000000001">
        </property>
        <property name="height" class="ptolemy.data.expr.Parameter" value="490.00000000000006">
        </property>
        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.8,1.0,0.2}">
        </property>
        <property name="rounding" class="ptolemy.data.expr.Parameter" value="25">
        </property>
        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
    </property>
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1345.0, 995.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={-1, 27, 2562, 1414}, maximized=true}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[2335, 1282]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.5625000000000027">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{780.005476051402, 683.2015917056074}">
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.LayoutConfiguration">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.6,0.0,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Localization Information">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[430.0, 385.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.6,0.0,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Spin Command">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[245.0, 880.0]">
        </property>
    </property>
    <property name="ModelID" class="ptolemy.vergil.kernel.attributes.IDAttribute">
        <property name="created" class="ptolemy.kernel.util.StringAttribute" value="Aug 12, 2015 4:54:58 PM">
        </property>
        <property name="lastUpdated" class="ptolemy.kernel.util.StringAttribute" value="Sep 2, 2015 8:15:52 PM">
        </property>
        <property name="author" class="ptolemy.kernel.util.StringAttribute" value="bradjc">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1335.0, 1175.0]">
        </property>
    </property>
    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="false">
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.0,0.8,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Robot Control">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1315.0, 420.0]">
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Choice Receiver">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[480.0, 1030.0]">
        </property>
    </property>
    <property name="Annotation7" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Main Controller">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[675.0, 965.0]">
        </property>
    </property>
    <property name="rosBridgeIP" class="ptolemy.data.expr.StringParameter" value="192.168.11.108">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1140.0, 1040.0]">
        </property>
    </property>
    <property name="poseUpdateThreshold" class="ptolemy.data.expr.Parameter" value="0.3">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1140.0, 1060.0]">
        </property>
    </property>
    <property name="spinDuration" class="ptolemy.data.expr.Parameter" value="7">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1140.0, 1080.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="_defaultInferredWidthTo1" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <property name="Annotation8" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Applause Detection">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[470.0, 1190.0]">
        </property>
    </property>
    <property name="Rectangle2" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[440.0, 645.0]">
        </property>
        <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="2.0">
        </property>
        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="width" class="ptolemy.data.expr.Parameter" value="650.0">
        </property>
        <property name="height" class="ptolemy.data.expr.Parameter" value="519.8311444652909">
        </property>
        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,1.0,0.0,0.15}">
        </property>
        <property name="rounding" class="ptolemy.data.expr.Parameter" value="25">
        </property>
        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
    </property>
    <property name="Rectangle3" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
        <property name="_location" class="ptolemy.kernel.util.Location" value="667.4997281426706, 1133.3336150076052">
        </property>
        <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="2.0">
        </property>
        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="width" class="ptolemy.data.expr.Parameter" value="604.9342105263156">
        </property>
        <property name="height" class="ptolemy.data.expr.Parameter" value="323.2786885245903">
        </property>
        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,0.15}">
        </property>
        <property name="rounding" class="ptolemy.data.expr.Parameter" value="25">
        </property>
        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.6,0.0,1.0}">
        </property>
        <property name="anchor" class="ptolemy.data.expr.StringParameter" value="south">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Robot Idle Pattern&#10;   &quot;Sentry Mode&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, 725.0]">
        </property>
    </property>
    <entity name="Scarab" class="org.terraswarm.accessor.JSAccessor">
        <display name="Lane"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Scarab Accessor. &#10; *&#10; * Outputs battery charge percentage and &#10; *&#10; *  @accessor Scarab&#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function() {&#10;&#10;  input('pose');&#10;  input('cmdvel');&#10;  input('cancel');&#10;&#10;  output('battery', {&#10;    type: 'int'&#10;  });&#10;  output('state', {&#10;    type: 'string'&#10;  });&#10;  output('location');&#10;&#10;  parameter('server', {&#10;    type: 'string',&#10;    value: 'localhost'&#10;  });&#10;  parameter('port', {&#10;    type: 'int',&#10;    value: 8080&#10;  });&#10;  parameter('topicPrefix', {&#10;    type: 'string',&#10;    value: '/scarab/lucy'&#10;  });&#10;}&#10;&#10;var batteryClient = null;&#10;var stateClient = null;&#10;var locationClient = null;&#10;var poseClient = null;&#10;var cmdvelClient = null;&#10;var cancelClient = null;&#10;&#10;var seq = 0;&#10;&#10;/** Initializes accessor by attaching functions to inputs. */&#10;exports.initialize = function() {&#10;&#10;  // Retreive the current battery charge status&#10;  batteryClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  batteryClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    batteryClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/diagnostics'&#10;    });&#10;  });&#10;  batteryClient.on('message', function (msg) {&#10;    // Quick hack to find the charge of the battery.&#10;    // Ideally this would be done in some better way, but this is all we&#10;    // need for now.&#10;    s = msg.msg.status[1].message;&#10;    charge = parseInt(s.substr(0, s.indexOf('%')));&#10;    if (!isNaN(charge)) {&#10;      send('battery', charge);&#10;    }&#10;  });&#10;  batteryClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Keep track of what the robot is doing&#10;  stateClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  stateClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    stateClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/state'&#10;    });&#10;  });&#10;  stateClient.on('message', function (msg) {&#10;    // one of: IDLE, BUSY, STUCK, FAILED&#10;    send('state', msg.msg.state);&#10;  });&#10;  stateClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Get location updates from the robot&#10;  locationClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  locationClient.on('open', function () {&#10;    // Subscribe to /scarab/name/pose&#10;    locationClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/pose'&#10;    });&#10;  });&#10;  locationClient.on('message', function (msg) {&#10;    send('location', msg.msg.pose);&#10;  });&#10;  locationClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Send poses to the robot&#10;  poseClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  poseClient.on('open', function () {&#10;    poseClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/goal',&#10;        type: 'geometry_msgs/PoseStamped'&#10;    });&#10;  });&#10;  poseClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('pose', pose_in);&#10;&#10;  // Send cmd_vel to the robot&#10;  cmdvelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cmdvelClient.on('open', function () {&#10;    cmdvelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel',&#10;        type: 'geometry_msgs/Twist'&#10;    });&#10;  });&#10;  cmdvelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cmdvel', cmdvel_in);&#10;&#10;  // Send cancel to the robot&#10;  cancelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cancelClient.on('open', function () {&#10;    cancelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cancel',&#10;        type: 'std_msgs/Empty'&#10;    });&#10;  });&#10;  cancelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cancel', cancel_in);&#10;} &#10;&#10;var pose_in = function () {&#10;  var v = get('pose');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/goal',&#10;    msg: {&#10;      'header': {&#10;        'seq': seq++,&#10;        'stamp': {&#10;          'secs': 0,&#10;          'nsecs': 0&#10;        },&#10;        'frame_id': 'map_hokuyo'&#10;      },&#10;      'pose': v&#10;    }&#10;  };&#10;&#10;  poseClient.send(out);&#10;}&#10;&#10;var cmdvel_in = function () {&#10;  var c = get('cmdvel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cmd_vel',&#10;    msg: c&#10;  };&#10;&#10;  cmdvelClient.send(out);&#10;}&#10;&#10;var cancel_in = function () {&#10;  var c = get('cancel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cancel',&#10;    msg: {}&#10;  };&#10;&#10;  cancelClient.send(out);&#10;}&#10;&#10;exports.wrapup = function() {&#10;  if (stateClient) {&#10;    stateClient.removeAllListeners('open');&#10;    stateClient.removeAllListeners('message');&#10;    stateClient.removeAllListeners('close');&#10;    stateClient.close();&#10;    stateClient = null;&#10;  }&#10;  if (batteryClient) {&#10;    batteryClient.removeAllListeners('open');&#10;    batteryClient.removeAllListeners('message');&#10;    batteryClient.removeAllListeners('close');&#10;    batteryClient.close();&#10;    batteryClient = null;&#10;  }&#10;  if (locationClient) {&#10;    locationClient.removeAllListeners('open');&#10;    locationClient.removeAllListeners('message');&#10;    locationClient.removeAllListeners('close');&#10;    locationClient.close();&#10;    locationClient = null;&#10;  }&#10;  if (poseClient) {&#10;    poseClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/goal'&#10;    });&#10;    poseClient.removeAllListeners('open');&#10;    poseClient.removeAllListeners('message');&#10;    poseClient.removeAllListeners('close');&#10;    poseClient.close();&#10;    poseClient = null;&#10;  }&#10;  if (cmdvelClient) {&#10;    cmdvelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel'&#10;    });&#10;    cmdvelClient.removeAllListeners('open');&#10;    cmdvelClient.removeAllListeners('message');&#10;    cmdvelClient.removeAllListeners('close');&#10;    cmdvelClient.close();&#10;    cmdvelClient = null;&#10;  }&#10;  if (cancelClient) {&#10;    cancelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cancel'&#10;    });&#10;    cancelClient.removeAllListeners('open');&#10;    cancelClient.removeAllListeners('message');&#10;    cancelClient.removeAllListeners('close');&#10;    cancelClient.close();&#10;    cancelClient = null;&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Scarab.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="server" class="ptolemy.data.expr.Parameter" value="${rosBridgeIP}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="topicPrefix" class="ptolemy.data.expr.Parameter" value="/scarab/lane">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1240.0, 500.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmd" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="battery" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmdvel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cancel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="CoordinateLinearTransform" class="org.terraswarm.accessor.JSAccessor">
        <display name="Transform2Robot"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Shifts X,Y,Z coordinates&#10; *&#10; *  @accessor CoordinateLinearTransform&#10; *&#10;*/&#10;&#10;var shifts = {&#10;  X: 0,&#10;  Y: 0,&#10;  Z: 0&#10;};&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input', {&#10;  });&#10;  output('Output', {&#10;  });&#10;&#10;  //&#10;  // Parameters&#10;  //&#10;  parameter('Xshift', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;  parameter('Yshift', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;  parameter('Zshift', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;&#10;  addInputHandler('Input', Input_in);&#10;&#10;  shifts.X = getParameter('Xshift');&#10;  shifts.Y = getParameter('Yshift');&#10;  shifts.Z = getParameter('Zshift');&#10;}&#10;&#10;var Input_in = function () {&#10;  var v = get('Input');&#10;&#10;  var axes = ['X', 'Y', 'Z'];&#10;  for (i=0; i&lt;axes.length; i++) {&#10;    var axis = axes[i];&#10;&#10;    if (typeof v === 'object' &amp;&amp; axis in v &amp;&amp; v.hasOwnProperty(axis)) {&#10;      v[axis] += shifts[axis];&#10;    }&#10;  }&#10;&#10;  send('Output', v);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/CoordinateLinearTransform.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Xshift" class="ptolemy.data.expr.Parameter" value="5.3">
        </property>
        <property name="Yshift" class="ptolemy.data.expr.Parameter" value="0.177">
        </property>
        <property name="Zshift" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[385.0, 550.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="multiport"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="Scarab2" class="org.terraswarm.accessor.JSAccessor">
        <display name="Lady"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Scarab Accessor. &#10; *&#10; * Outputs battery charge percentage and &#10; *&#10; *  @accessor Scarab&#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function() {&#10;&#10;  input('pose');&#10;  input('cmdvel');&#10;  input('cancel');&#10;&#10;  output('battery', {&#10;    type: 'int'&#10;  });&#10;  output('state', {&#10;    type: 'string'&#10;  });&#10;  output('location');&#10;&#10;  parameter('server', {&#10;    type: 'string',&#10;    value: 'localhost'&#10;  });&#10;  parameter('port', {&#10;    type: 'int',&#10;    value: 8080&#10;  });&#10;  parameter('topicPrefix', {&#10;    type: 'string',&#10;    value: '/scarab/lucy'&#10;  });&#10;}&#10;&#10;var batteryClient = null;&#10;var stateClient = null;&#10;var locationClient = null;&#10;var poseClient = null;&#10;var cmdvelClient = null;&#10;var cancelClient = null;&#10;&#10;var seq = 0;&#10;&#10;/** Initializes accessor by attaching functions to inputs. */&#10;exports.initialize = function() {&#10;&#10;  // Retreive the current battery charge status&#10;  batteryClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  batteryClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    batteryClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/diagnostics'&#10;    });&#10;  });&#10;  batteryClient.on('message', function (msg) {&#10;    // Quick hack to find the charge of the battery.&#10;    // Ideally this would be done in some better way, but this is all we&#10;    // need for now.&#10;    s = msg.msg.status[1].message;&#10;    charge = parseInt(s.substr(0, s.indexOf('%')));&#10;    if (!isNaN(charge)) {&#10;      send('battery', charge);&#10;    }&#10;  });&#10;  batteryClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Keep track of what the robot is doing&#10;  stateClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  stateClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    stateClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/state'&#10;    });&#10;  });&#10;  stateClient.on('message', function (msg) {&#10;    // one of: IDLE, BUSY, STUCK, FAILED&#10;    send('state', msg.msg.state);&#10;  });&#10;  stateClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Get location updates from the robot&#10;  locationClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  locationClient.on('open', function () {&#10;    // Subscribe to /scarab/name/pose&#10;    locationClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/pose'&#10;    });&#10;  });&#10;  locationClient.on('message', function (msg) {&#10;    send('location', msg.msg.pose);&#10;  });&#10;  locationClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Send poses to the robot&#10;  poseClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  poseClient.on('open', function () {&#10;    poseClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/goal',&#10;        type: 'geometry_msgs/PoseStamped'&#10;    });&#10;  });&#10;  poseClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('pose', pose_in);&#10;&#10;  // Send cmd_vel to the robot&#10;  cmdvelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cmdvelClient.on('open', function () {&#10;    cmdvelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel',&#10;        type: 'geometry_msgs/Twist'&#10;    });&#10;  });&#10;  cmdvelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cmdvel', cmdvel_in);&#10;&#10;  // Send cancel to the robot&#10;  cancelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cancelClient.on('open', function () {&#10;    cancelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cancel',&#10;        type: 'std_msgs/Empty'&#10;    });&#10;  });&#10;  cancelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cancel', cancel_in);&#10;} &#10;&#10;var pose_in = function () {&#10;  var v = get('pose');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/goal',&#10;    msg: {&#10;      'header': {&#10;        'seq': seq++,&#10;        'stamp': {&#10;          'secs': 0,&#10;          'nsecs': 0&#10;        },&#10;        'frame_id': 'map_hokuyo'&#10;      },&#10;      'pose': v&#10;    }&#10;  };&#10;&#10;  poseClient.send(out);&#10;}&#10;&#10;var cmdvel_in = function () {&#10;  var c = get('cmdvel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cmd_vel',&#10;    msg: c&#10;  };&#10;&#10;  cmdvelClient.send(out);&#10;}&#10;&#10;var cancel_in = function () {&#10;  var c = get('cancel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cancel',&#10;    msg: {}&#10;  };&#10;&#10;  cancelClient.send(out);&#10;}&#10;&#10;exports.wrapup = function() {&#10;  if (stateClient) {&#10;    stateClient.removeAllListeners('open');&#10;    stateClient.removeAllListeners('message');&#10;    stateClient.removeAllListeners('close');&#10;    stateClient.close();&#10;    stateClient = null;&#10;  }&#10;  if (batteryClient) {&#10;    batteryClient.removeAllListeners('open');&#10;    batteryClient.removeAllListeners('message');&#10;    batteryClient.removeAllListeners('close');&#10;    batteryClient.close();&#10;    batteryClient = null;&#10;  }&#10;  if (locationClient) {&#10;    locationClient.removeAllListeners('open');&#10;    locationClient.removeAllListeners('message');&#10;    locationClient.removeAllListeners('close');&#10;    locationClient.close();&#10;    locationClient = null;&#10;  }&#10;  if (poseClient) {&#10;    poseClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/goal'&#10;    });&#10;    poseClient.removeAllListeners('open');&#10;    poseClient.removeAllListeners('message');&#10;    poseClient.removeAllListeners('close');&#10;    poseClient.close();&#10;    poseClient = null;&#10;  }&#10;  if (cmdvelClient) {&#10;    cmdvelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel'&#10;    });&#10;    cmdvelClient.removeAllListeners('open');&#10;    cmdvelClient.removeAllListeners('message');&#10;    cmdvelClient.removeAllListeners('close');&#10;    cmdvelClient.close();&#10;    cmdvelClient = null;&#10;  }&#10;  if (cancelClient) {&#10;    cancelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cancel'&#10;    });&#10;    cancelClient.removeAllListeners('open');&#10;    cancelClient.removeAllListeners('message');&#10;    cancelClient.removeAllListeners('close');&#10;    cancelClient.close();&#10;    cancelClient = null;&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Scarab.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="server" class="ptolemy.data.expr.Parameter" value="${rosBridgeIP}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="topicPrefix" class="ptolemy.data.expr.Parameter" value="/scarab/lady">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1240.0, 620.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmd" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="battery" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmdvel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cancel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="WebSocketServer" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor starts a server that listens for web socket&#10; *  connection requests on the specified hostInterface and port.  The&#10; *  hostInterface is needed only if the host machine has more than one&#10; *  network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; *  not resolve to the desired interface.&#10; *&#10; *  &lt;p&gt;The output &lt;code&gt;connection&lt;/code&gt; reports the when a&#10; *  connection is opened or closed.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When a message arrives on a connection, a &lt;code&gt;received&lt;/code&gt;&#10; *  output is produced with that message.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When an input arrives on &lt;code&gt;toSend&lt;/code&gt;, then a message is&#10; *  sent to one or all of the open socket connections.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the&#10; *  server and all connections.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;The messages can be any type that has a JSON representation.&#10; *  For incomming messages, this accessor assumes that the message is&#10; *  a string in UTF-8 that encodes a JSON object.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;This accessor requires the module webSocket.&lt;/p&gt;&#10; *&#10; *  @accessor WebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {number} port The port to listen to for connections.&#10; *  @input toSend The data to be sent to open sockets. If this is an object with 'socketID' field and a 'message' field, then send the value of the message field to the socket identified by the socketID field. If the input has any other form, then the message is broadcast to all open socket connections.&#10; *  @output connection An output produced when a connection opens or closes. The output is an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'status' field, which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'message' field, which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee &#10; *  @version $$Id: WebSocketServer.js 234 2015-08-01 22:06:40Z eal $$ &#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;var server = null;&#10;var running = false;&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function() {&#10;    parameter('hostInterface', {&#10;        value: &quot;localhost&quot;, &#10;        type: &quot;string&quot; &#10;    });&#10;    parameter('port', {&#10;        value: 8080, &#10;        type: &quot;int&quot; &#10;    });&#10;    input('toSend');&#10;    output('received');&#10;    output('connection');&#10;}&#10;&#10;var handle;&#10;var sockets = [];&#10;&#10;/** Starts the web socket and attaches functions to inputs and outputs. &#10;  * Adds an input handler on toSend that sends the input received to the right socket. */ &#10;exports.initialize = function() {&#10;    if (!server) {&#10;        server = new WebSocket.Server({'port':getParameter('port'),&#10;                                       'hostInterface':getParameter('hostInterface')});&#10;        server.on('listening', onListening);&#10;        server.on('connection', onConnection);&#10;        server.start();&#10;    }&#10;    running = true;&#10;&#10;    handle = addInputHandler('toSend', function() {&#10;        var data = get('toSend');&#10;        // Careful: Don't do if (data) because if data === 0, then data is false.&#10;        if (data !== null) {&#10;            if ((data.socketID != null)  &amp;&amp; (data.message != null)) {&#10;                // data has the right form for a point-to-point send.&#10;                if (sockets[data.socketID] &amp;&amp; sockets[data.socketID].isOpen()) {&#10;                    // id matches this socket.&#10;                    console.log(&quot;Sending to socket id &quot; &#10;                            + data.socketID&#10;                            + &quot; message: &quot;&#10;                            + data.message);&#10;                    sockets[data.socketID].send(data.message);&#10;                } else {&#10;                    console.log('Socket with ID ' + data.socketID&#10;                            + ' is not open. Discarding message: ' + data.message);&#10;                }&#10;            } else {&#10;                // No socketID or message, so this is a broadcast message.&#10;                var success = false;&#10;                for (var id = 0; id &lt; sockets.length; id++) {&#10;                    if (sockets[id].isOpen()) {&#10;                        console.log(&quot;Broadcasting to socket id &quot; + id &#10;                                + &quot; message: &quot; + data);&#10;                        sockets[id].send(data);&#10;                        success = true;&#10;                    }&#10;                }&#10;                if (!success) {&#10;                    console.log('No open sockets. Discarding message: ' + data.message);&#10;                }&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function onListening() {&#10;    console.log('Server: Listening for socket connection requests.');&#10;}&#10;&#10;/** Executes when a connection has been establised.&lt;br&gt;&#10; *  Triggers an output on &lt;code&gt;'connection'&lt;/code&gt;.&#10; *  Adds an event listener to the socket. */&#10;function onConnection(socket) {&#10;   //socketID is the index of the socket in the sockets array. &#10;    var socketID = sockets.length;&#10;    console.log('Server: new socket established with ID: ' + socketID);&#10;    send('connection', {'socketID':socketID, 'status':'open'});&#10;    socket.on('message', function(message) {&#10;        send('received', {'socketID':socketID, 'message':message});&#10;    });&#10;    socket.on('close', function(message) {&#10;        send('connection', {'socketID':socketID, 'status':'closed'});&#10;    });&#10;&#10;    sockets.push(socket);    &#10;}&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server. */&#10;exports.wrapup = function(){&#10;    for (var i = 0; i &lt; sockets.length; i++) {&#10;        sockets[i].removeAllListeners();&#10;    }&#10;&#10;    sockets = [];&#10;    removeInputHandler(handle); &#10;&#10;    if (server != null) {&#10;        server.removeAllListeners();&#10;        server.close();&#10;        server = null;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/WebSocketServer.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="JSAccessorIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-36.0, -29.0]">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="74.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="64.0">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.8,1.0,1.0}">
                </property>
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="30">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="italic" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="WS">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-16.0, -12.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={348, 412, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="{-25.0, 3.0}">
                </property>
                <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="14.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="60.99999999999999">
                </property>
                <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                </property>
                <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 10.0, -10.0, 0.0, -20.0}">
                </property>
                <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{0.0, 0.0}">
            </property>
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8081">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[475.0, 1085.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Display6" class="ptolemy.actor.lib.gui.Display">
        <display name="Connections"/>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={285, 662, 759, 306}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[759, 262]">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="Connection Commands">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[870.0, 835.0]">
        </property>
    </entity>
    <entity name="OpKeySwitching" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Switching Network&#10; *&#10; * Takes in control assignments in the form of {input: key_value,&#10; *                                              output: output_index,&#10; *                                              type: add|remove}&#10; * and maps inputs to outputs&#10; *&#10; *  @accessor OpSwitching&#10; *&#10;*/&#10;&#10;var key;&#10;&#10;var matrix = {};&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;&#10;  input('Select');&#10;&#10;  output('Output0');&#10;  output('Output1');&#10;  output('Output2');&#10;  output('Output3');&#10;  output('Output4');&#10;  output('Output5');&#10;&#10;  parameter('Key', {&#10;    type: 'string',&#10;    value: 'id'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;&#10;  addInputHandler('Select', Select_in);&#10;  addInputHandler('Input', Input_in);&#10;}&#10;&#10;var Select_in = function () {&#10;  var s = get('Select');&#10;&#10;  var t = s['type'];&#10;  var i = s['input'];&#10;  var o = 'Output' + s['output'];&#10;&#10;  if (!(i in matrix &amp;&amp; matrix.hasOwnProperty(i))) {&#10;    // Create the array if it doesn't exist&#10;    matrix[i] = [];&#10;  }&#10;&#10;  if (t == 'remove') {&#10;    // Get rid of this connection&#10;    var destarr = matrix[i];&#10;    var index = destarr.indexOf(o);&#10;    if (index &gt; -1) {&#10;        destarr.splice(index, 1);&#10;    }&#10;  &#10;  } else if (t == 'add') {&#10;&#10;    // Make sure this output isn't connected already&#10;    for (var input in matrix) {&#10;      if (matrix.hasOwnProperty(input)) {&#10;        for (var j=0; j&lt;matrix[input].length; j++) {&#10;          var outp = matrix[input][j];&#10;          if (outp == o) {&#10;            matrix[input].splice(j, 1);&#10;            break;&#10;          }&#10;        }      &#10;      }&#10;    }&#10;&#10;    // New connection!&#10;    var destarr = matrix[i];&#10;    var index = destarr.indexOf(o);&#10;    if (index == -1) {&#10;      // Not already there, so let's add it&#10;      destarr.push(o);&#10;    }&#10;  }&#10;&#10;  console.log(matrix);&#10;  &#10;}&#10;&#10;var Input_in = function () {&#10;  var i = get('Input');&#10;&#10;  if (typeof i === 'object' &amp;&amp; key in i &amp;&amp; i.hasOwnProperty(key)) {&#10;    var val = i[key];&#10;    if (val in matrix &amp;&amp; matrix.hasOwnProperty(val)) {&#10;      var out = matrix[val];&#10;      // Send to all connected outputs&#10;      for (var j=0; j&lt;out.length; j++) {&#10;        send(out[j], i);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpKeySwitching.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="true">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="id">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{830.0, 690.0}">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Select" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="SOUTH">
            </property>
        </port>
        <port name="Output0" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Output1" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Output2" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Output3" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Output4" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Output5" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="RoboCafeController" class="org.terraswarm.accessor.JSAccessor">
        <display name="ApplicationController"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** RoboCafe Controller&#10; *&#10; *  @accessor RoboCafeController&#10; *&#10;*/&#10;&#10;&#10;var NUM_ROBOTS = 4;&#10;&#10;// STATES&#10;var STATE_IDLE = 'IDLE';         // Robot is currently just sitting there.&#10;var STATE_SERVING = 'SERVING';   // Robot has been requested and is going to a person.&#10;var STATE_SPINNING = 'SPINNING'; // Applause was detected and the robot is interrupted to spin.&#10;&#10;// MAPPING OF ITEM TO ROBOTS and the queue for that item&#10;var ITEMS = {&#10;  Twix:        {&#10;    robots: [0, 3],&#10;    queue: []&#10;  },&#10;  SquirtGun:   {&#10;    robots: [1],&#10;    queue: []&#10;  },&#10;  BouncyBalls: {&#10;    robots: [2],&#10;    queue: []&#10;  }&#10;}&#10;&#10;// Array of robot structs with state on each one.&#10;var robots = [];&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;  //&#10;  // I/O&#10;  //&#10;  input('UserChoice');&#10;  input('Applause');&#10;&#10;  output('SelectPhoneRobot');&#10;  output('RobotStatus');&#10;  output('AppState');&#10;&#10;  //&#10;  // Parameters&#10;  //&#10;  // Which robot to make spin.&#10;  parameter('SpinRobotIndex', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;  // Number of seconds the robot will spin for.&#10;  parameter('SpinRobotDuration', {&#10;    type: 'number',&#10;    value: 5&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;&#10;  // Initialize all robots&#10;  for (var i=0; i&lt;NUM_ROBOTS; i++) {&#10;    var robot = {};&#10;    robot.state = STATE_IDLE;&#10;    robot.servicing = null;&#10;    robots[i] = robot;&#10;&#10;    // Output initial status&#10;    update_status(i, STATE_IDLE);&#10;  }&#10;&#10;  addInputHandler('UserChoice', Choice_in);&#10;  addInputHandler('Applause', Applause_in);&#10;&#10;  // in case more than one request is received before a 'spin','cancelled' or&#10;  // 'finished' event, the second request ends up in the queue until the next&#10;  // event. To avoid this, poll queues and process events if robots are free.&#10;  setInterval(process_queue, 1000);&#10;}&#10;&#10;&#10;// Effectively connect an incoming location stream to a robot's&#10;// /goal topic.&#10;// operation is whether to connect ('add') or disconnect ('remove')&#10;// the connection between the phone and robot.&#10;function set_source_and_robot (phone_id, robot_index, operation) {&#10;  var out = {&#10;    type: operation,&#10;    input: phone_id,&#10;    output: robot_index&#10;  }&#10;  send('SelectPhoneRobot', out);&#10;}&#10;&#10;// Publish on the status output a robot's state change&#10;function update_status (robot_index, state) {&#10;  robots[robot_index].state = state;&#10;  send('RobotStatus', {&#10;    robotid: robot_index,&#10;    status: state&#10;  });&#10;}&#10;&#10;// Tell all listeners what's going on in the controller.&#10;function publish_state () {&#10;  send('AppState', robots);&#10;}&#10;&#10;// // Add a phone id to the robot's queue of things to service.&#10;// function queue_request (robot_index, phone_id, priorityIndex) {&#10;//   // Get the robot&#10;//   rbt = robots[robot_index]; &#10;&#10;//   // Check that the given robot&#10;//   if ((rbt.servicing == null || rbt.servicing != phone_id) &amp;&amp; rbt.queue.indexOf(phone_id) == -1) {&#10;//     console.log(&quot;Queueing phone with id: &quot; + phone_id);&#10;&#10;//     // if no priority has been specified, this is a reqular queueing event&#10;//     // if it is not null, however, means that the specified phone has been&#10;//     // interrupted by a spin, so put it at the top of the queue.&#10;//     if (priorityIndex == null) {&#10;//       // Robot not free, queue this request&#10;//       rbt.queue.push(phone_id);&#10;//     } else {&#10;//       rbt.queue.unshift(phone_id); &#10;//     }&#10;//     return true;&#10;//   } else { &#10;//     console.log(&quot;Could not queue &quot; + phone_id  + &quot;. Robot Servicing= &quot; + rbt.servicing + &#10;//     &quot; Queue Contents: &quot; + rbt.queue.toString()) ;&#10;//   }&#10;  &#10;//   return false;&#10;// }&#10;&#10;function process_queue () {&#10;&#10;  // Iterate over items, and in turn each robot&#10;  for (var item in ITEMS) {&#10;    var item_obj = ITEMS[item];&#10;&#10;    // Each robot for the item&#10;    for (var i=0; i&lt;item_obj.robots.length; i++) {&#10;      var rbt_idx = i;&#10;      var rbt = robots[rbt_idx];&#10;&#10;      // Our options are to send this robot to someone in the queue,&#10;      // leave it alone, or send it home.&#10;      if (rbt.status != STATE_IDLE) {&#10;        // Robot is busy, leave it alone&#10;      &#10;      } else {&#10;        // Robot is idle.&#10;        if (item_obj.queue.length &gt; 0) {&#10;          // Aha! Someone is waiting for this item, and this robot is idle.&#10;          // Send it!&#10;          var next_phone = item_obj.queue.shift();&#10;          rbt.state = STATE_SERVING;&#10;          // Keep track of which user this robot is attached to&#10;          rbt.servicing = next_phone;&#10;          // And send the robot to the person&#10;          set_source_and_robot(next_phone, rbt_idx, 'add');&#10;          // And update output status&#10;          update_status(rbt_idx, STATE_SERVING);&#10;          publish_state();&#10;&#10;        } else {&#10;          // This robot is idle and no one wants anything from it.&#10;          // Make sure it is going home. It's entirely possible this line&#10;          // of code gets called multiple times. This is OK as the switch&#10;          // handles that.&#10;          set_source_and_robot('Home'+rbt_idx, rbt_idx, 'add');  &#10;        }&#10;      }&#10;    }&#10;  }&#10;&#10;  //   // Check to see if there is anyone in the queue&#10;  //   if (item_obj.queue.length &gt; 0) {&#10;&#10;&#10;  //   } else {&#10;  //     // Make sure this robot is going home&#10;&#10;  //   }&#10;  // }&#10;&#10;&#10;  // rbt = robots[robot_index];&#10;  // if (rbt.queue.length &gt; 0 &amp;&amp; rbt.state == STATE_IDLE) { &#10;  //   var next_phone = rbt.queue.shift();&#10;  //   // Ok great!&#10;  //   // Put this one into service&#10;  //   rbt.state = STATE_SERVING;&#10;  //   // Keep track of which user this robot is attached to&#10;  //   rbt.servicing = next_phone;&#10;  //   // And send the robot to the person&#10;  //   set_source_and_robot(next_phone, robot_index, 'add');&#10;  //   // And update output status&#10;  //   update_status(robot_index, STATE_SERVING);&#10;  //   publish_state();&#10;  //   console.log(&quot;Processing event from the queue with id: &quot; + next_phone);&#10;  //   return true;&#10;  // }&#10;  // return false; &#10;}&#10;&#10;var Choice_in = function () {&#10;  var ws_payload = get('UserChoice');&#10;&#10;  // Check if this is a normal message from a client or a status message&#10;  if ('message' in ws_payload) {&#10;    var msg = ws_payload.message;&#10;&#10;    // Get the unique identifier for what sent this packet&#10;    var phone_id = msg.phone_id;&#10;&#10;    // Do some common operations for choice selections, cancellations,&#10;    // and done events&#10;    if (msg.type == 'selection' ||&#10;        msg.type == 'cancelled' ||&#10;        msg.type == 'finished') {&#10;&#10;      // What item/candy the user asked for&#10;      var selection = msg.selection;&#10;&#10;      // Now that we know what the user wants, figure out if we can satisfy&#10;      // the request&#10;      if (selection in ITEMS) {&#10;        &#10;        // We know what this is. If the user wants it we add them to the queue&#10;        // and we'll process the queue to dispatch a robot.&#10;        if (msg.type == 'selection') {&#10;          // Add the request to the queue for that item, if the user is not&#10;          // already in the queue.&#10;          if (ITEMS[selection].queue.indexOf(phone_id) == -1) {&#10;            ITEMS[selection].queue.push(phone_id);&#10;          }&#10;        &#10;        } else if (msg.type == 'cancelled' || msg.type == 'finished') {&#10;          // User got the item or doesn't want it&#10;&#10;          // Get the list of robots that may have been navigating to the user&#10;          var robot_indexes = ITEMS[selection].robots;&#10;&#10;          // Iterate each robot, checking to see if it was heading for that&#10;          // user. If so, stop the robot from doing that.&#10;          for (var i=0; i&lt;robot_indexes.length; i++) {&#10;            var rbt_idx = robot_indexes[i];&#10;            var rbt = robots[rbt_idx];&#10;          &#10;            // Check if this robot was helping this person&#10;            if (rbt.state == STATE_SERVING &amp;&amp; rbt.servicing == phone_id) {&#10;              // This checks out. Stop the robot from what it was doing&#10;              // and send it home.&#10;              set_source_and_robot(phone_id, rbt_idx, 'remove');&#10;              update_status(rbt_idx, STATE_IDLE);&#10;              rbt.servicing = null;&#10;              publish_state();&#10;            }&#10;          }&#10;&#10;          // Now check that this user wasn't queued for a robot with that&#10;          // item. If it was, remove it.&#10;          var item_queue = ITEMS[selection].queue;&#10;          if (item_queue.indexOf(phone_id) &gt; -1) {&#10;            item_queue.splice(item_queue.indexOf(phone_id), 1);&#10;          }&#10;        }&#10;&#10;        // And take care of our queues to see if we should dispatch robots&#10;        // anywhere.&#10;        process_queue();&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;        // // Get the robot struct of the one that has what we are looking for&#10;        // var rbt_idx = ITEMS[selection];&#10;        // console.log('Got robot index: '+rbt_idx + ' for ' + selection + ' on phone ' + phone_id);&#10;        // var rbt = robots[rbt_idx];&#10;&#10;        // // Now do what we want if this is a new selection&#10;        // if (msg.type == 'selection') {&#10;        //   // We have a robot, check its state&#10;        //   if (rbt.state == STATE_IDLE) {&#10;        //     console.log(&quot;Robot &quot; + rbt_idx + &quot; was free, processing request&quot;);&#10;        //     // Ok great!&#10;        //     // Put this one into service&#10;        //     rbt.state = STATE_SERVING;&#10;        //     // Keep track of which user this robot is attached to&#10;        //     rbt.servicing = phone_id;&#10;        //     // And send the robot to the person&#10;        //     set_source_and_robot(phone_id, rbt_idx, 'add');&#10;        //     // And update output status&#10;        //     update_status(rbt_idx, STATE_SERVING);&#10;        //     publish_state();&#10;        //   } else {&#10;        //     // request to queue this request to be processed later&#10;        //     queue_request(rbt_idx, phone_id, null);&#10;        //   }&#10;        &#10;&#10;        // } else if (msg.type == 'cancelled' || msg.type == 'finished') {&#10;        //   // We no longer need this robot to go to this person, send it&#10;        //   // back home&#10;&#10;        //   // Check that the correct robot was helping this person&#10;        //   if (rbt.state == STATE_SERVING &amp;&amp; rbt.servicing == phone_id) {&#10;        //     // This checks out. Stop the robot from what it was doing&#10;        //     // and send it home.&#10;        //     set_source_and_robot(phone_id, rbt_idx, 'remove');&#10;        //     rbt.state = STATE_IDLE;&#10;        //     update_status(rbt_idx, STATE_IDLE);&#10;        //     publish_state();&#10;        //     rbt.servicing = null;&#10;        //     // if no more events to be processed, send robot home.&#10;        //     if (rbt.queue.length == 0 &amp;&amp; rbt.state == STATE_IDLE) { &#10;        //         // go back home &#10;        //         // Send the robot home.&#10;        //         set_source_and_robot('Home'+rbt_idx, rbt_idx, 'add');  &#10;        //     }&#10;            &#10;        //   } else {&#10;        //     // Check if this phone is in queue and remove it&#10;        //     if (rbt.queue.indexOf(phone_id) &gt; -1) {&#10;        //       rbt.queue.splice(rbt.queue.indexOf(phone_id), 1);&#10;        //     }&#10;        //   } &#10;        // }&#10;&#10;&#10;      } else {&#10;        console.log('Could not find a robot that matched item ' + selection);&#10;      }&#10;&#10;    }&#10;&#10;  }&#10;&#10;}&#10;&#10;var Applause_in = function () {&#10;  var a = get('Applause');&#10;&#10;  if (a == 'no_applause') {&#10;    // ignore&#10;  &#10;  } else if (a == 'some_applause') {&#10;    // Make one robot spin&#10;&#10;    var robot_index = parseInt(getParameter('SpinRobotIndex'));&#10;    var robot = robots[robot_index];&#10;&#10;    //unset the service status.&#10;    // var old_servicing = robot.servicing;&#10;    &#10;    // Robot is busy with spinning!&#10;    update_status(robot_index, STATE_SPINNING);&#10;&#10;    if (robot.servicing != null) { &#10;      console.log(&quot;Will queue &quot; + robot.servicing + &quot; to be processed later.&quot;);&#10;      // Find which item this robot is carrying, and add this user to that&#10;      // queue.&#10;      for (var item in ITEMS) {&#10;        if (ITEMS[item].robots.indexOf(robot_index) != -1) {&#10;          ITEMS[item].queue.unshift(robot.servicing);&#10;        }&#10;      }&#10;&#10;      // Stop what ever was controlling the robot before&#10;      set_source_and_robot(robot.servicing, robot_index, 'remove');&#10;&#10;      // Clear this&#10;      robot.servicing = null;&#10;    }&#10;&#10;    // Make it spin&#10;    set_source_and_robot('Spin', robot_index, 'add');&#10;&#10;    // After the spin is done, put it back&#10;    setTimeout(function () {&#10;      // Stop the spin command&#10;      set_source_and_robot('Spin', robot_index, 'remove');&#10;&#10;      // Go idle for now&#10;      update_status(robot_index, STATE_IDLE);&#10;&#10;      // Keep all of the update logic in one place. Since we added the previous&#10;      // user to the front of the queue we can just use that to reconfigure the&#10;      // robot.&#10;      process_queue();&#10;    }, getParameter('SpinRobotDuration') * 1000);&#10;&#10;&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/RoboCafeController.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[695.0, 1095.0]">
        </property>
        <property name="SpinRobotIndex" class="ptolemy.data.expr.Parameter" value="2">
        </property>
        <property name="SpinRobotDuration" class="ptolemy.data.expr.Parameter" value="spinDuration">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="UserChoice" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="SelectPhoneRobot" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="RobotStatus" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Applause" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="AppState" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Display7" class="ptolemy.actor.lib.gui.Display">
        <display name="User Choices"/>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={72, 522, 759, 306}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[759, 262]">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="User Choices">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[650.0, 1015.0]">
        </property>
    </entity>
    <entity name="Scarab4" class="org.terraswarm.accessor.JSAccessor">
        <display name="Lizzy"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Scarab Accessor. &#10; *&#10; * Outputs battery charge percentage and &#10; *&#10; *  @accessor Scarab&#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function() {&#10;&#10;  input('pose');&#10;  input('cmdvel');&#10;  input('cancel');&#10;&#10;  output('battery', {&#10;    type: 'int'&#10;  });&#10;  output('state', {&#10;    type: 'string'&#10;  });&#10;  output('location');&#10;&#10;  parameter('server', {&#10;    type: 'string',&#10;    value: 'localhost'&#10;  });&#10;  parameter('port', {&#10;    type: 'int',&#10;    value: 8080&#10;  });&#10;  parameter('topicPrefix', {&#10;    type: 'string',&#10;    value: '/scarab/lucy'&#10;  });&#10;}&#10;&#10;var batteryClient = null;&#10;var stateClient = null;&#10;var locationClient = null;&#10;var poseClient = null;&#10;var cmdvelClient = null;&#10;var cancelClient = null;&#10;&#10;var seq = 0;&#10;&#10;/** Initializes accessor by attaching functions to inputs. */&#10;exports.initialize = function() {&#10;&#10;  // Retreive the current battery charge status&#10;  batteryClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  batteryClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    batteryClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/diagnostics'&#10;    });&#10;  });&#10;  batteryClient.on('message', function (msg) {&#10;    // Quick hack to find the charge of the battery.&#10;    // Ideally this would be done in some better way, but this is all we&#10;    // need for now.&#10;    s = msg.msg.status[1].message;&#10;    charge = parseInt(s.substr(0, s.indexOf('%')));&#10;    if (!isNaN(charge)) {&#10;      send('battery', charge);&#10;    }&#10;  });&#10;  batteryClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Keep track of what the robot is doing&#10;  stateClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  stateClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    stateClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/state'&#10;    });&#10;  });&#10;  stateClient.on('message', function (msg) {&#10;    // one of: IDLE, BUSY, STUCK, FAILED&#10;    send('state', msg.msg.state);&#10;  });&#10;  stateClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Get location updates from the robot&#10;  locationClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  locationClient.on('open', function () {&#10;    // Subscribe to /scarab/name/pose&#10;    locationClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/pose'&#10;    });&#10;  });&#10;  locationClient.on('message', function (msg) {&#10;    send('location', msg.msg.pose);&#10;  });&#10;  locationClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Send poses to the robot&#10;  poseClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  poseClient.on('open', function () {&#10;    poseClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/goal',&#10;        type: 'geometry_msgs/PoseStamped'&#10;    });&#10;  });&#10;  poseClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('pose', pose_in);&#10;&#10;  // Send cmd_vel to the robot&#10;  cmdvelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cmdvelClient.on('open', function () {&#10;    cmdvelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel',&#10;        type: 'geometry_msgs/Twist'&#10;    });&#10;  });&#10;  cmdvelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cmdvel', cmdvel_in);&#10;&#10;  // Send cancel to the robot&#10;  cancelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cancelClient.on('open', function () {&#10;    cancelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cancel',&#10;        type: 'std_msgs/Empty'&#10;    });&#10;  });&#10;  cancelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cancel', cancel_in);&#10;} &#10;&#10;var pose_in = function () {&#10;  var v = get('pose');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/goal',&#10;    msg: {&#10;      'header': {&#10;        'seq': seq++,&#10;        'stamp': {&#10;          'secs': 0,&#10;          'nsecs': 0&#10;        },&#10;        'frame_id': 'map_hokuyo'&#10;      },&#10;      'pose': v&#10;    }&#10;  };&#10;&#10;  poseClient.send(out);&#10;}&#10;&#10;var cmdvel_in = function () {&#10;  var c = get('cmdvel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cmd_vel',&#10;    msg: c&#10;  };&#10;&#10;  cmdvelClient.send(out);&#10;}&#10;&#10;var cancel_in = function () {&#10;  var c = get('cancel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cancel',&#10;    msg: {}&#10;  };&#10;&#10;  cancelClient.send(out);&#10;}&#10;&#10;exports.wrapup = function() {&#10;  if (stateClient) {&#10;    stateClient.removeAllListeners('open');&#10;    stateClient.removeAllListeners('message');&#10;    stateClient.removeAllListeners('close');&#10;    stateClient.close();&#10;    stateClient = null;&#10;  }&#10;  if (batteryClient) {&#10;    batteryClient.removeAllListeners('open');&#10;    batteryClient.removeAllListeners('message');&#10;    batteryClient.removeAllListeners('close');&#10;    batteryClient.close();&#10;    batteryClient = null;&#10;  }&#10;  if (locationClient) {&#10;    locationClient.removeAllListeners('open');&#10;    locationClient.removeAllListeners('message');&#10;    locationClient.removeAllListeners('close');&#10;    locationClient.close();&#10;    locationClient = null;&#10;  }&#10;  if (poseClient) {&#10;    poseClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/goal'&#10;    });&#10;    poseClient.removeAllListeners('open');&#10;    poseClient.removeAllListeners('message');&#10;    poseClient.removeAllListeners('close');&#10;    poseClient.close();&#10;    poseClient = null;&#10;  }&#10;  if (cmdvelClient) {&#10;    cmdvelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel'&#10;    });&#10;    cmdvelClient.removeAllListeners('open');&#10;    cmdvelClient.removeAllListeners('message');&#10;    cmdvelClient.removeAllListeners('close');&#10;    cmdvelClient.close();&#10;    cmdvelClient = null;&#10;  }&#10;  if (cancelClient) {&#10;    cancelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cancel'&#10;    });&#10;    cancelClient.removeAllListeners('open');&#10;    cancelClient.removeAllListeners('message');&#10;    cancelClient.removeAllListeners('close');&#10;    cancelClient.close();&#10;    cancelClient = null;&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Scarab.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="server" class="ptolemy.data.expr.Parameter" value="${rosBridgeIP}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="topicPrefix" class="ptolemy.data.expr.Parameter" value="/scarab/lizzy">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1240.0, 850.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmd" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="battery" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmdvel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cancel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Command2Pose" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Create a ROS message from an X,Y,Z coordinate.&#10; *&#10; *  @accessor Command2PoseVel&#10; *&#10;*/&#10;&#10;// Set default&#10;var last_location = {&#10;  position: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0&#10;  },&#10;  orientation: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0,&#10;    w: 1&#10;  }&#10;};&#10;&#10;// Variables for spin&#10;var timer = null;&#10;var currently_spinning = false;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  // Input command of what the robot should do.&#10;  //  {&#10;  //    command: Go|Spin&#10;  //    X: Y: Z:   // only if Go command&#10;  //  }&#10;  input('Command');&#10;&#10;  // Current location of the robot&#10;  input('Location');&#10;&#10;  // Direct the robot&#10;  output('Pose');&#10;&#10;  // Raw access&#10;  output('CmdVel');&#10;  output('Cancel');&#10;&#10;  // How long to let the robot spin&#10;  parameter('SpinDuration', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Command', Command_in);&#10;  addInputHandler('Location', Location_in);&#10;}&#10;&#10;var Command_in = function () {&#10;  // Now parse the incoming command&#10;  var cmd = get('Command');&#10;&#10;  if (cmd.command == 'Go') {&#10;&#10;    // Upon new command we need to stop any internal timers&#10;    if (timer != null) {&#10;      clearTimeout(timer);&#10;    }&#10;&#10;    // Send the robot to the given location&#10;  &#10;    var x = cmd.X || 0; &#10;    var y = cmd.Y || 0; &#10;    var z = cmd.Z || 0; &#10;&#10;    out = {&#10;      'position': {&#10;        'x': x,&#10;        'y': y,&#10;        'z': 0.0&#10;      },&#10;      'orientation': last_location.orientation&#10;    }&#10;    send('Pose', out);&#10;&#10;  } else if (cmd.command == 'Spin') {&#10;    if (!currently_spinning) {&#10;      currently_spinning  = true;&#10;&#10;      // Start by cancelling wherever it was going&#10;      send('Cancel', true);&#10;&#10;      // Wait for a quick second to make sure the cancel command has a &#10;      // chance to go through&#10;      setTimeout(function () {&#10;&#10;        // Now power the wheels to spin&#10;        var spin_vel = {&#10;          linear: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 0&#10;          },&#10;          angular: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 1.0&#10;          }&#10;        };&#10;&#10;        send('CmdVel', spin_vel);&#10;&#10;        // Now stop the spin at some point&#10;        timer = setTimeout(function () {&#10;          var spin_no = {&#10;            linear: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            },&#10;            angular: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            }&#10;          };&#10;&#10;          send('CmdVel', spin_no);&#10;          currently_spinning = false;&#10;          timer = null;&#10;        }, getParameter('SpinDuration')*1000);&#10;&#10;      }, 50);&#10;    }&#10;    &#10;  }&#10;}&#10;&#10;// Save the last location&#10;var Location_in = function () {&#10;  last_location = get('Location');&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Command2PoseVel.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1090.0, 500.0]">
        </property>
        <property name="SpinDuration" class="ptolemy.data.expr.Parameter" value="spinDuration">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Location" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
            <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="SOUTH">
            </property>
        </port>
        <port name="Pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CmdVel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Cancel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Command2Pose2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Create a ROS message from an X,Y,Z coordinate.&#10; *&#10; *  @accessor Command2PoseVel&#10; *&#10;*/&#10;&#10;// Set default&#10;var last_location = {&#10;  position: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0&#10;  },&#10;  orientation: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0,&#10;    w: 1&#10;  }&#10;};&#10;&#10;// Variables for spin&#10;var timer = null;&#10;var currently_spinning = false;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  // Input command of what the robot should do.&#10;  //  {&#10;  //    command: Go|Spin&#10;  //    X: Y: Z:   // only if Go command&#10;  //  }&#10;  input('Command');&#10;&#10;  // Current location of the robot&#10;  input('Location');&#10;&#10;  // Direct the robot&#10;  output('Pose');&#10;&#10;  // Raw access&#10;  output('CmdVel');&#10;  output('Cancel');&#10;&#10;  // How long to let the robot spin&#10;  parameter('SpinDuration', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Command', Command_in);&#10;  addInputHandler('Location', Location_in);&#10;}&#10;&#10;var Command_in = function () {&#10;  // Now parse the incoming command&#10;  var cmd = get('Command');&#10;&#10;  if (cmd.command == 'Go') {&#10;&#10;    // Upon new command we need to stop any internal timers&#10;    if (timer != null) {&#10;      clearTimeout(timer);&#10;    }&#10;&#10;    // Send the robot to the given location&#10;  &#10;    var x = cmd.X || 0; &#10;    var y = cmd.Y || 0; &#10;    var z = cmd.Z || 0; &#10;&#10;    out = {&#10;      'position': {&#10;        'x': x,&#10;        'y': y,&#10;        'z': 0.0&#10;      },&#10;      'orientation': last_location.orientation&#10;    }&#10;    send('Pose', out);&#10;&#10;  } else if (cmd.command == 'Spin') {&#10;    if (!currently_spinning) {&#10;      currently_spinning  = true;&#10;&#10;      // Start by cancelling wherever it was going&#10;      send('Cancel', true);&#10;&#10;      // Wait for a quick second to make sure the cancel command has a &#10;      // chance to go through&#10;      setTimeout(function () {&#10;&#10;        // Now power the wheels to spin&#10;        var spin_vel = {&#10;          linear: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 0&#10;          },&#10;          angular: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 1.0&#10;          }&#10;        };&#10;&#10;        send('CmdVel', spin_vel);&#10;&#10;        // Now stop the spin at some point&#10;        timer = setTimeout(function () {&#10;          var spin_no = {&#10;            linear: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            },&#10;            angular: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            }&#10;          };&#10;&#10;          send('CmdVel', spin_no);&#10;          currently_spinning = false;&#10;          timer = null;&#10;        }, getParameter('SpinDuration')*1000);&#10;&#10;      }, 50);&#10;    }&#10;    &#10;  }&#10;}&#10;&#10;// Save the last location&#10;var Location_in = function () {&#10;  last_location = get('Location');&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Command2PoseVel.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1090.0, 620.0]">
        </property>
        <property name="SpinDuration" class="ptolemy.data.expr.Parameter" value="spinDuration">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Location" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
            <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="SOUTH">
            </property>
        </port>
        <port name="Pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CmdVel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Cancel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Command2Pose3" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Create a ROS message from an X,Y,Z coordinate.&#10; *&#10; *  @accessor Command2PoseVel&#10; *&#10;*/&#10;&#10;// Set default&#10;var last_location = {&#10;  position: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0&#10;  },&#10;  orientation: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0,&#10;    w: 1&#10;  }&#10;};&#10;&#10;// Variables for spin&#10;var timer = null;&#10;var currently_spinning = false;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  // Input command of what the robot should do.&#10;  //  {&#10;  //    command: Go|Spin&#10;  //    X: Y: Z:   // only if Go command&#10;  //  }&#10;  input('Command');&#10;&#10;  // Current location of the robot&#10;  input('Location');&#10;&#10;  // Direct the robot&#10;  output('Pose');&#10;&#10;  // Raw access&#10;  output('CmdVel');&#10;  output('Cancel');&#10;&#10;  // How long to let the robot spin&#10;  parameter('SpinDuration', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Command', Command_in);&#10;  addInputHandler('Location', Location_in);&#10;}&#10;&#10;var Command_in = function () {&#10;  // Now parse the incoming command&#10;  var cmd = get('Command');&#10;&#10;  if (cmd.command == 'Go') {&#10;&#10;    // Upon new command we need to stop any internal timers&#10;    if (timer != null) {&#10;      clearTimeout(timer);&#10;    }&#10;&#10;    // Send the robot to the given location&#10;  &#10;    var x = cmd.X || 0; &#10;    var y = cmd.Y || 0; &#10;    var z = cmd.Z || 0; &#10;&#10;    out = {&#10;      'position': {&#10;        'x': x,&#10;        'y': y,&#10;        'z': 0.0&#10;      },&#10;      'orientation': last_location.orientation&#10;    }&#10;    send('Pose', out);&#10;&#10;  } else if (cmd.command == 'Spin') {&#10;    if (!currently_spinning) {&#10;      currently_spinning  = true;&#10;&#10;      // Start by cancelling wherever it was going&#10;      send('Cancel', true);&#10;&#10;      // Wait for a quick second to make sure the cancel command has a &#10;      // chance to go through&#10;      setTimeout(function () {&#10;&#10;        // Now power the wheels to spin&#10;        var spin_vel = {&#10;          linear: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 0&#10;          },&#10;          angular: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 1.0&#10;          }&#10;        };&#10;&#10;        send('CmdVel', spin_vel);&#10;&#10;        // Now stop the spin at some point&#10;        timer = setTimeout(function () {&#10;          var spin_no = {&#10;            linear: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            },&#10;            angular: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            }&#10;          };&#10;&#10;          send('CmdVel', spin_no);&#10;          currently_spinning = false;&#10;          timer = null;&#10;        }, getParameter('SpinDuration')*1000);&#10;&#10;      }, 50);&#10;    }&#10;    &#10;  }&#10;}&#10;&#10;// Save the last location&#10;var Location_in = function () {&#10;  last_location = get('Location');&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Command2PoseVel.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1090.0, 735.0]">
        </property>
        <property name="SpinDuration" class="ptolemy.data.expr.Parameter" value="7.0">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Location" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
            <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="SOUTH">
            </property>
        </port>
        <port name="Pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CmdVel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Cancel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Command2Pose4" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Create a ROS message from an X,Y,Z coordinate.&#10; *&#10; *  @accessor Command2PoseVel&#10; *&#10;*/&#10;&#10;// Set default&#10;var last_location = {&#10;  position: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0&#10;  },&#10;  orientation: {&#10;    x: 0,&#10;    y: 0,&#10;    z: 0,&#10;    w: 1&#10;  }&#10;};&#10;&#10;// Variables for spin&#10;var timer = null;&#10;var currently_spinning = false;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  // Input command of what the robot should do.&#10;  //  {&#10;  //    command: Go|Spin&#10;  //    X: Y: Z:   // only if Go command&#10;  //  }&#10;  input('Command');&#10;&#10;  // Current location of the robot&#10;  input('Location');&#10;&#10;  // Direct the robot&#10;  output('Pose');&#10;&#10;  // Raw access&#10;  output('CmdVel');&#10;  output('Cancel');&#10;&#10;  // How long to let the robot spin&#10;  parameter('SpinDuration', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Command', Command_in);&#10;  addInputHandler('Location', Location_in);&#10;}&#10;&#10;var Command_in = function () {&#10;  // Now parse the incoming command&#10;  var cmd = get('Command');&#10;&#10;  if (cmd.command == 'Go') {&#10;&#10;    // Upon new command we need to stop any internal timers&#10;    if (timer != null) {&#10;      clearTimeout(timer);&#10;    }&#10;&#10;    // Send the robot to the given location&#10;  &#10;    var x = cmd.X || 0; &#10;    var y = cmd.Y || 0; &#10;    var z = cmd.Z || 0; &#10;&#10;    out = {&#10;      'position': {&#10;        'x': x,&#10;        'y': y,&#10;        'z': 0.0&#10;      },&#10;      'orientation': last_location.orientation&#10;    }&#10;    send('Pose', out);&#10;&#10;  } else if (cmd.command == 'Spin') {&#10;    if (!currently_spinning) {&#10;      currently_spinning  = true;&#10;&#10;      // Start by cancelling wherever it was going&#10;      send('Cancel', true);&#10;&#10;      // Wait for a quick second to make sure the cancel command has a &#10;      // chance to go through&#10;      setTimeout(function () {&#10;&#10;        // Now power the wheels to spin&#10;        var spin_vel = {&#10;          linear: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 0&#10;          },&#10;          angular: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 1.0&#10;          }&#10;        };&#10;&#10;        send('CmdVel', spin_vel);&#10;&#10;        // Now stop the spin at some point&#10;        timer = setTimeout(function () {&#10;          var spin_no = {&#10;            linear: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            },&#10;            angular: {&#10;              x: 0,&#10;              y: 0,&#10;              z: 0&#10;            }&#10;          };&#10;&#10;          send('CmdVel', spin_no);&#10;          currently_spinning = false;&#10;          timer = null;&#10;        }, getParameter('SpinDuration')*1000);&#10;&#10;      }, 50);&#10;    }&#10;    &#10;  }&#10;}&#10;&#10;// Save the last location&#10;var Location_in = function () {&#10;  last_location = get('Location');&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Command2PoseVel.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1090.0, 850.0]">
        </property>
        <property name="SpinDuration" class="ptolemy.data.expr.Parameter" value="7.0">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Location" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
            <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="SOUTH">
            </property>
        </port>
        <port name="Pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CmdVel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Cancel" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Location2Command" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Create a Command from a location. Make a Go command.&#10; *&#10; *  @accessor Location2Command&#10; *&#10;*/&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Location');&#10;  output('Command');&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Location', Location_in);&#10;}&#10;&#10;// Add command&#10;var Location_in = function () {&#10;  var l = get('Location');&#10;  l.command = 'Go';&#10;  send('Command', l);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Location2Command.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[665.0, 550.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Location" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Command" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="Scarab3" class="org.terraswarm.accessor.JSAccessor">
        <display name="Lucy"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Scarab Accessor. &#10; *&#10; * Outputs battery charge percentage and &#10; *&#10; *  @accessor Scarab&#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function() {&#10;&#10;  input('pose');&#10;  input('cmdvel');&#10;  input('cancel');&#10;&#10;  output('battery', {&#10;    type: 'int'&#10;  });&#10;  output('state', {&#10;    type: 'string'&#10;  });&#10;  output('location');&#10;&#10;  parameter('server', {&#10;    type: 'string',&#10;    value: 'localhost'&#10;  });&#10;  parameter('port', {&#10;    type: 'int',&#10;    value: 8080&#10;  });&#10;  parameter('topicPrefix', {&#10;    type: 'string',&#10;    value: '/scarab/lucy'&#10;  });&#10;}&#10;&#10;var batteryClient = null;&#10;var stateClient = null;&#10;var locationClient = null;&#10;var poseClient = null;&#10;var cmdvelClient = null;&#10;var cancelClient = null;&#10;&#10;var seq = 0;&#10;&#10;/** Initializes accessor by attaching functions to inputs. */&#10;exports.initialize = function() {&#10;&#10;  // Retreive the current battery charge status&#10;  batteryClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  batteryClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    batteryClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/diagnostics'&#10;    });&#10;  });&#10;  batteryClient.on('message', function (msg) {&#10;    // Quick hack to find the charge of the battery.&#10;    // Ideally this would be done in some better way, but this is all we&#10;    // need for now.&#10;    s = msg.msg.status[1].message;&#10;    charge = parseInt(s.substr(0, s.indexOf('%')));&#10;    if (!isNaN(charge)) {&#10;      send('battery', charge);&#10;    }&#10;  });&#10;  batteryClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Keep track of what the robot is doing&#10;  stateClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  stateClient.on('open', function () {&#10;    // Subscribe to /scarab/name/diagnostics&#10;    stateClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/state'&#10;    });&#10;  });&#10;  stateClient.on('message', function (msg) {&#10;    // one of: IDLE, BUSY, STUCK, FAILED&#10;    send('state', msg.msg.state);&#10;  });&#10;  stateClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Get location updates from the robot&#10;  locationClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  locationClient.on('open', function () {&#10;    // Subscribe to /scarab/name/pose&#10;    locationClient.send({&#10;        op: &quot;subscribe&quot;,&#10;        topic: getParameter('topicPrefix') + '/pose'&#10;    });&#10;  });&#10;  locationClient.on('message', function (msg) {&#10;    send('location', msg.msg.pose);&#10;  });&#10;  locationClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;&#10;  // Send poses to the robot&#10;  poseClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  poseClient.on('open', function () {&#10;    poseClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/goal',&#10;        type: 'geometry_msgs/PoseStamped'&#10;    });&#10;  });&#10;  poseClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('pose', pose_in);&#10;&#10;  // Send cmd_vel to the robot&#10;  cmdvelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cmdvelClient.on('open', function () {&#10;    cmdvelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel',&#10;        type: 'geometry_msgs/Twist'&#10;    });&#10;  });&#10;  cmdvelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cmdvel', cmdvel_in);&#10;&#10;  // Send cancel to the robot&#10;  cancelClient = new WebSocket.Client({&#10;    host: getParameter('server'),&#10;    port: getParameter('port')&#10;  });&#10;  cancelClient.on('open', function () {&#10;    cancelClient.send({&#10;        op: 'advertise',&#10;        topic: getParameter('topicPrefix') + '/cancel',&#10;        type: 'std_msgs/Empty'&#10;    });&#10;  });&#10;  cancelClient.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  addInputHandler('cancel', cancel_in);&#10;} &#10;&#10;var pose_in = function () {&#10;  var v = get('pose');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/goal',&#10;    msg: {&#10;      'header': {&#10;        'seq': seq++,&#10;        'stamp': {&#10;          'secs': 0,&#10;          'nsecs': 0&#10;        },&#10;        'frame_id': 'map_hokuyo'&#10;      },&#10;      'pose': v&#10;    }&#10;  };&#10;&#10;  poseClient.send(out);&#10;}&#10;&#10;var cmdvel_in = function () {&#10;  var c = get('cmdvel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cmd_vel',&#10;    msg: c&#10;  };&#10;&#10;  cmdvelClient.send(out);&#10;}&#10;&#10;var cancel_in = function () {&#10;  var c = get('cancel');&#10;&#10;  out = {&#10;    op: 'publish',&#10;    topic: getParameter('topicPrefix') + '/cancel',&#10;    msg: {}&#10;  };&#10;&#10;  cancelClient.send(out);&#10;}&#10;&#10;exports.wrapup = function() {&#10;  if (stateClient) {&#10;    stateClient.removeAllListeners('open');&#10;    stateClient.removeAllListeners('message');&#10;    stateClient.removeAllListeners('close');&#10;    stateClient.close();&#10;    stateClient = null;&#10;  }&#10;  if (batteryClient) {&#10;    batteryClient.removeAllListeners('open');&#10;    batteryClient.removeAllListeners('message');&#10;    batteryClient.removeAllListeners('close');&#10;    batteryClient.close();&#10;    batteryClient = null;&#10;  }&#10;  if (locationClient) {&#10;    locationClient.removeAllListeners('open');&#10;    locationClient.removeAllListeners('message');&#10;    locationClient.removeAllListeners('close');&#10;    locationClient.close();&#10;    locationClient = null;&#10;  }&#10;  if (poseClient) {&#10;    poseClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/goal'&#10;    });&#10;    poseClient.removeAllListeners('open');&#10;    poseClient.removeAllListeners('message');&#10;    poseClient.removeAllListeners('close');&#10;    poseClient.close();&#10;    poseClient = null;&#10;  }&#10;  if (cmdvelClient) {&#10;    cmdvelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cmd_vel'&#10;    });&#10;    cmdvelClient.removeAllListeners('open');&#10;    cmdvelClient.removeAllListeners('message');&#10;    cmdvelClient.removeAllListeners('close');&#10;    cmdvelClient.close();&#10;    cmdvelClient = null;&#10;  }&#10;  if (cancelClient) {&#10;    cancelClient.send({&#10;        op: 'unadvertise',&#10;        topic: getParameter('topicPrefix') + '/cancel'&#10;    });&#10;    cancelClient.removeAllListeners('open');&#10;    cancelClient.removeAllListeners('message');&#10;    cancelClient.removeAllListeners('close');&#10;    cancelClient.close();&#10;    cancelClient = null;&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/Scarab.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="server" class="ptolemy.data.expr.Parameter" value="${rosBridgeIP}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="topicPrefix" class="ptolemy.data.expr.Parameter" value="/scarab/lucy">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1240.0, 735.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmd" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="battery" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cmdvel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cancel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="id">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="Home0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 640.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="ConstantKeyValue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Output a constant key,value pair.&#10; *&#10; *&#10; *  @accessor ConstantKeyValue&#10; *&#10;*/&#10;&#10;var out = {};&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  output('kv');&#10;&#10;  parameter('Period', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  out[getParameter('Key')] = getParameter('Value');&#10;&#10;  setInterval(function () {&#10;    send('kv', out);&#10;  }, getParameter('Period')*1000);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/ConstantKeyValue.js">
        </property>
        <property name="JSAccessorIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-79.0, -15.0]">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="153.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="33.0">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.4,0.4,0.4,1.0}">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={263, 315, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeValueAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,1.0,1.0,1.0}">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="anchor" class="ptolemy.data.expr.StringParameter" value="east">
                </property>
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="Key">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-3.0, 1.0]">
                </property>
            </property>
            <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="25">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.8,0.8,1.0}">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="{">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-81.0, -14.0]">
                </property>
            </property>
            <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="25">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.8,0.8,1.0}">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value=":">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-9.0, -9.0]">
                </property>
            </property>
            <property name="ParameterValue2" class="ptolemy.vergil.kernel.attributes.AttributeValueAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,1.0,1.0,1.0}">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="anchor" class="ptolemy.data.expr.StringParameter" value="west">
                </property>
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="Value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-3.0, 2.0]">
                </property>
            </property>
            <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="25">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.8,0.8,1.0}">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="}">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, -13.0]">
                </property>
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{0.0, 0.0}">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Period" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="command">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="Spin">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{410.0, 870.0}">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="kv" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="JSAccessorIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="-2.5, -0.5">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="73.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="31.0">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.8,0.6,1.0}">
                </property>
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="24">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                </property>
                <property name="fontFamily" class="ptolemy.data.expr.StringParameter" value="sans-serif">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="italic" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="[k]=v">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-2.0, 0.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={448, 144, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="id">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="Spin">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[585.0, 870.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="WebSocketServer2" class="org.terraswarm.accessor.JSAccessor">
        <display name="ALPS Receiver"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor starts a server that listens for web socket&#10; *  connection requests on the specified hostInterface and port.  The&#10; *  hostInterface is needed only if the host machine has more than one&#10; *  network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; *  not resolve to the desired interface.&#10; *&#10; *  &lt;p&gt;The output &lt;code&gt;connection&lt;/code&gt; reports the when a&#10; *  connection is opened or closed.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When a message arrives on a connection, a &lt;code&gt;received&lt;/code&gt;&#10; *  output is produced with that message.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When an input arrives on &lt;code&gt;toSend&lt;/code&gt;, then a message is&#10; *  sent to one or all of the open socket connections.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the&#10; *  server and all connections.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;The messages can be any type that has a JSON representation.&#10; *  For incomming messages, this accessor assumes that the message is&#10; *  a string in UTF-8 that encodes a JSON object.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;This accessor requires the module webSocket.&lt;/p&gt;&#10; *&#10; *  @accessor WebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {number} port The port to listen to for connections.&#10; *  @input toSend The data to be sent to open sockets. If this is an object with 'socketID' field and a 'message' field, then send the value of the message field to the socket identified by the socketID field. If the input has any other form, then the message is broadcast to all open socket connections.&#10; *  @output connection An output produced when a connection opens or closes. The output is an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'status' field, which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'message' field, which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee &#10; *  @version $$Id: WebSocketServer.js 234 2015-08-01 22:06:40Z eal $$ &#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;var server = null;&#10;var running = false;&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function() {&#10;    parameter('hostInterface', {&#10;        value: &quot;localhost&quot;, &#10;        type: &quot;string&quot; &#10;    });&#10;    parameter('port', {&#10;        value: 8080, &#10;        type: &quot;int&quot; &#10;    });&#10;    input('toSend');&#10;    output('received');&#10;    output('connection');&#10;}&#10;&#10;var handle;&#10;var sockets = [];&#10;&#10;/** Starts the web socket and attaches functions to inputs and outputs. &#10;  * Adds an input handler on toSend that sends the input received to the right socket. */ &#10;exports.initialize = function() {&#10;    if (!server) {&#10;        server = new WebSocket.Server({'port':getParameter('port'),&#10;                                       'hostInterface':getParameter('hostInterface')});&#10;        server.on('listening', onListening);&#10;        server.on('connection', onConnection);&#10;        server.start();&#10;    }&#10;    running = true;&#10;&#10;    handle = addInputHandler('toSend', function() {&#10;        var data = get('toSend');&#10;        // Careful: Don't do if (data) because if data === 0, then data is false.&#10;        if (data !== null) {&#10;            if ((data.socketID != null)  &amp;&amp; (data.message != null)) {&#10;                // data has the right form for a point-to-point send.&#10;                if (sockets[data.socketID] &amp;&amp; sockets[data.socketID].isOpen()) {&#10;                    // id matches this socket.&#10;                    console.log(&quot;Sending to socket id &quot; &#10;                            + data.socketID&#10;                            + &quot; message: &quot;&#10;                            + data.message);&#10;                    sockets[data.socketID].send(data.message);&#10;                } else {&#10;                    console.log('Socket with ID ' + data.socketID&#10;                            + ' is not open. Discarding message: ' + data.message);&#10;                }&#10;            } else {&#10;                // No socketID or message, so this is a broadcast message.&#10;                var success = false;&#10;                for (var id = 0; id &lt; sockets.length; id++) {&#10;                    if (sockets[id].isOpen()) {&#10;                        console.log(&quot;Broadcasting to socket id &quot; + id &#10;                                + &quot; message: &quot; + data);&#10;                        sockets[id].send(data);&#10;                        success = true;&#10;                    }&#10;                }&#10;                if (!success) {&#10;                    console.log('No open sockets. Discarding message: ' + data.message);&#10;                }&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function onListening() {&#10;    console.log('Server: Listening for socket connection requests.');&#10;}&#10;&#10;/** Executes when a connection has been establised.&lt;br&gt;&#10; *  Triggers an output on &lt;code&gt;'connection'&lt;/code&gt;.&#10; *  Adds an event listener to the socket. */&#10;function onConnection(socket) {&#10;   //socketID is the index of the socket in the sockets array. &#10;    var socketID = sockets.length;&#10;    console.log('Server: new socket established with ID: ' + socketID);&#10;    send('connection', {'socketID':socketID, 'status':'open'});&#10;    socket.on('message', function(message) {&#10;        send('received', {'socketID':socketID, 'message':message});&#10;    });&#10;    socket.on('close', function(message) {&#10;        send('connection', {'socketID':socketID, 'status':'closed'});&#10;    });&#10;&#10;    sockets.push(socket);    &#10;}&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server. */&#10;exports.wrapup = function(){&#10;    for (var i = 0; i &lt; sockets.length; i++) {&#10;        sockets[i].removeAllListeners();&#10;    }&#10;&#10;    sockets = [];&#10;    removeInputHandler(handle); &#10;&#10;    if (server != null) {&#10;        server.removeAllListeners();&#10;        server.close();&#10;        server = null;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/WebSocketServer.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="JSAccessorIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-38.0, -29.0]">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="74.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="64.0">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.8,1.0,1.0}">
                </property>
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="30">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="italic" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="WS">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-17.0, -12.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={281, 257, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="{-25.0, 3.0}">
                </property>
                <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="14.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="60.99999999999999">
                </property>
                <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                </property>
                <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 10.0, -10.0, 0.0, -20.0}">
                </property>
                <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{0.0, 0.0}">
            </property>
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8082">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 550.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Display9" class="ptolemy.actor.lib.gui.Display">
        <display name="ALPS Location"/>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={129, 630, 759, 306}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[759, 262]">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="ALPS Location">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[285.0, 465.0]">
        </property>
    </entity>
    <entity name="OpStrip" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Strips out a certain key's value from an object.&#10; *&#10; *  @accessor OpStrip&#10; *&#10;*/&#10;&#10;// Filter params&#10;var key;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  //&#10;  // Parameters&#10;  //&#10;  // key to extract the value from&#10;  parameter('key', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Input', Input_in);&#10;  key = getParameter('key');&#10;}&#10;&#10;var Input_in = function () {&#10;  var i = get('Input');&#10;&#10;  if (typeof i === 'object' &amp;&amp; key in i &amp;&amp; i.hasOwnProperty(key)) {&#10;    send('Output', i[key]);&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpStrip.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="key" class="ptolemy.data.expr.Parameter" value="message">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, 550.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="ContainerLocation" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Contain the ALPS!&#10; *&#10; *&#10; *  @accessor ContainerLocation&#10; *&#10;*/&#10;&#10;var boundary = [];&#10;var boundary_single = [];&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('LocationIn');&#10;  output('LocationOut');&#10;&#10;  parameter('Boundary', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  var points = getParameter('Boundary').split(',');&#10;  for (var i=1; i&lt;points.length; i+=2) {&#10;    var x = parseFloat(points[i-1]);&#10;    var y = parseFloat(points[i]);&#10;    boundary_single.push(x);&#10;    boundary_single.push(y);&#10;    boundary.push([x, y]);&#10;  }&#10;&#10;  addInputHandler('LocationIn', LocationIn_In);&#10;}&#10;&#10;function checkInside (point) {&#10;    // ray-casting algorithm based on&#10;    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html&#10;    var vs = boundary;&#10;    var x = point[0], y = point[1];&#10;    &#10;    var inside = false;&#10;    for (var i = 0, j = vs.length - 1; i &lt; vs.length; j = i++) {&#10;        var xi = vs[i][0], yi = vs[i][1];&#10;        var xj = vs[j][0], yj = vs[j][1];&#10;        &#10;        var intersect = ((yi &gt; y) != (yj &gt; y))&#10;            &amp;&amp; (x &lt; (xj - xi) * (y - yi) / (yj - yi) + xi);&#10;        if (intersect) inside = !inside;&#10;    }&#10;    &#10;    return inside;&#10;};&#10;&#10;function offset_point (sx, sy, ex, ey) {&#10;  var a = sx - ex;&#10;  var b = sy - ey;&#10;  var l = Math.sqrt((a*a)+(b*b));&#10;  var scale = 0.3/l;&#10;&#10;  var new_x = ex - (scale*a);&#10;  var new_y = ey - (scale*b);&#10;&#10;  return [new_x, new_y];&#10;}&#10;&#10;var LocationIn_In = function () {&#10;  var p = get('LocationIn');&#10;  var x = p.X;&#10;  var y = p.Y;&#10;&#10;  // Check if the point is inside&#10;  if (checkInside([x, y])) {&#10;    // Woo! Good to go, send this along&#10;    send('LocationOut', p);&#10;  } else {&#10;    console.log('Point is outside ' + x + ' y: ' + y);&#10;&#10;    // Outside, get closest point&#10;    var closest = PolyK.ClosestEdge(boundary_single, x, y);&#10;    var new_x = closest.point.x;&#10;    var new_y = closest.point.y;&#10;&#10;    // Move 30cm beyond that so we don't go right to the wall&#10;    var shifted = offset_point(x, y, new_x, new_y);&#10;&#10;    p.X = shifted[0];&#10;    p.Y = shifted[1];&#10;    send('LocationOut', p);&#10;  }&#10;&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  /*&#10;    PolyK library&#10;    url: http://polyk.ivank.net&#10;    Released under MIT licence.&#10;    &#10;    Copyright (c) 2012 - 2014 Ivan Kuckir&#10;&#10;    Permission is hereby granted, free of charge, to any person&#10;    obtaining a copy of this software and associated documentation&#10;    files (the &quot;Software&quot;), to deal in the Software without&#10;    restriction, including without limitation the rights to use,&#10;    copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;    copies of the Software, and to permit persons to whom the&#10;    Software is furnished to do so, subject to the following&#10;    conditions:&#10;&#10;    The above copyright notice and this permission notice shall be&#10;    included in all copies or substantial portions of the Software.&#10;&#10;    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,&#10;    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES&#10;    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&#10;    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT&#10;    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,&#10;    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING&#10;    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&#10;    OTHER DEALINGS IN THE SOFTWARE.&#10;    &#10;    19. 5. 2014 - Problem with slicing fixed.&#10;  */&#10;&#10;  var PolyK = {};&#10;  &#10;  /*&#10;    Is Polygon self-intersecting?&#10;    &#10;    O(n^2)&#10;  */&#10;  &#10;  PolyK.IsSimple = function(p)&#10;  {&#10;    var n = p.length&gt;&gt;1;&#10;    if(n&lt;4) return true;&#10;    var a1 = new PolyK._P(), a2 = new PolyK._P();&#10;    var b1 = new PolyK._P(), b2 = new PolyK._P();&#10;    var c = new PolyK._P();&#10;    &#10;    for(var i=0; i&lt;n; i++)&#10;    {&#10;      a1.x = p[2*i  ];&#10;      a1.y = p[2*i+1];&#10;      if(i==n-1)  { a2.x = p[0    ];  a2.y = p[1    ]; }&#10;      else    { a2.x = p[2*i+2];  a2.y = p[2*i+3]; }&#10;      &#10;      for(var j=0; j&lt;n; j++)&#10;      {&#10;        if(Math.abs(i-j) &lt; 2) continue;&#10;        if(j==n-1 &amp;&amp; i==0) continue;&#10;        if(i==n-1 &amp;&amp; j==0) continue;&#10;        &#10;        b1.x = p[2*j  ];&#10;        b1.y = p[2*j+1];&#10;        if(j==n-1)  { b2.x = p[0    ];  b2.y = p[1    ]; }&#10;        else    { b2.x = p[2*j+2];  b2.y = p[2*j+3]; }&#10;        &#10;        if(PolyK._GetLineIntersection(a1,a2,b1,b2,c) != null) return false;&#10;      }&#10;    }&#10;    return true;&#10;  }&#10;  &#10;  PolyK.IsConvex = function(p)&#10;  {&#10;    if(p.length&lt;6) return true;&#10;    var l = p.length - 4;&#10;    for(var i=0; i&lt;l; i+=2)&#10;      if(!PolyK._convex(p[i], p[i+1], p[i+2], p[i+3], p[i+4], p[i+5])) return false;&#10;    if(!PolyK._convex(p[l  ], p[l+1], p[l+2], p[l+3], p[0], p[1])) return false;&#10;    if(!PolyK._convex(p[l+2], p[l+3], p[0  ], p[1  ], p[2], p[3])) return false;&#10;    return true;&#10;  }&#10;  &#10;  PolyK.GetArea = function(p)&#10;  {&#10;    if(p.length &lt;6) return 0;&#10;    var l = p.length - 2;&#10;    var sum = 0;&#10;    for(var i=0; i&lt;l; i+=2)&#10;      sum += (p[i+2]-p[i]) * (p[i+1]+p[i+3]);&#10;    sum += (p[0]-p[l]) * (p[l+1]+p[1]);&#10;    return - sum * 0.5;&#10;  }&#10;  &#10;  PolyK.GetAABB = function(p)&#10;  {&#10;    var minx = Infinity; &#10;    var miny = Infinity;&#10;    var maxx = -minx;&#10;    var maxy = -miny;&#10;    for(var i=0; i&lt;p.length; i+=2)&#10;    {&#10;      minx = Math.min(minx, p[i  ]);&#10;      maxx = Math.max(maxx, p[i  ]);&#10;      miny = Math.min(miny, p[i+1]);&#10;      maxy = Math.max(maxy, p[i+1]);&#10;    }&#10;    return {x:minx, y:miny, width:maxx-minx, height:maxy-miny};&#10;  }&#10;  &#10;  PolyK.Reverse = function(p)&#10;  {&#10;    var np = [];&#10;    for(var j=p.length-2; j&gt;=0; j-=2)  np.push(p[j], p[j+1])&#10;    return np;&#10;  }&#10;  &#10;&#10;  PolyK.Triangulate = function(p)&#10;  {&#10;    var n = p.length&gt;&gt;1;&#10;    if(n&lt;3) return [];&#10;    var tgs = [];&#10;    var avl = [];&#10;    for(var i=0; i&lt;n; i++) avl.push(i);&#10;    &#10;    var i = 0;&#10;    var al = n;&#10;    while(al &gt; 3)&#10;    {&#10;      var i0 = avl[(i+0)%al];&#10;      var i1 = avl[(i+1)%al];&#10;      var i2 = avl[(i+2)%al];&#10;      &#10;      var ax = p[2*i0],  ay = p[2*i0+1];&#10;      var bx = p[2*i1],  by = p[2*i1+1];&#10;      var cx = p[2*i2],  cy = p[2*i2+1];&#10;      &#10;      var earFound = false;&#10;      if(PolyK._convex(ax, ay, bx, by, cx, cy))&#10;      {&#10;        earFound = true;&#10;        for(var j=0; j&lt;al; j++)&#10;        {&#10;          var vi = avl[j];&#10;          if(vi==i0 || vi==i1 || vi==i2) continue;&#10;          if(PolyK._PointInTriangle(p[2*vi], p[2*vi+1], ax, ay, bx, by, cx, cy)) {earFound = false; break;}&#10;        }&#10;      }&#10;      if(earFound)&#10;      {&#10;        tgs.push(i0, i1, i2);&#10;        avl.splice((i+1)%al, 1);&#10;        al--;&#10;        i= 0;&#10;      }&#10;      else if(i++ &gt; 3*al) break;    // no convex angles :(&#10;    }&#10;    tgs.push(avl[0], avl[1], avl[2]);&#10;    return tgs;&#10;  }&#10;  &#10;  PolyK.ContainsPoint = function(p, px, py)&#10;  {&#10;    var n = p.length&gt;&gt;1;&#10;    var ax, ay = p[2*n-3]-py, bx = p[2*n-2]-px, by = p[2*n-1]-py;&#10;    &#10;    //var lup = by &gt; ay;&#10;    for(var i=0; i&lt;n; i++)&#10;    {&#10;      ax = bx;  ay = by;&#10;      bx = p[2*i  ] - px;&#10;      by = p[2*i+1] - py;&#10;      if(ay==by) continue;&#10;      lup = by&gt;ay;&#10;    }&#10;    &#10;    var depth = 0;&#10;    for(var i=0; i&lt;n; i++)&#10;    {&#10;      ax = bx;  ay = by;&#10;      bx = p[2*i  ] - px;&#10;      by = p[2*i+1] - py;&#10;      if(ay&lt; 0 &amp;&amp; by&lt; 0) continue;  // both &quot;up&quot; or both &quot;down&quot;&#10;      if(ay&gt; 0 &amp;&amp; by&gt; 0) continue;  // both &quot;up&quot; or both &quot;down&quot;&#10;      if(ax&lt; 0 &amp;&amp; bx&lt; 0) continue;  // both points on the left&#10;      &#10;      if(ay==by &amp;&amp; Math.min(ax,bx)&lt;=0) return true;&#10;      if(ay==by) continue;&#10;      &#10;      var lx = ax + (bx-ax)*(-ay)/(by-ay);&#10;      if(lx==0) return true;      // point on edge&#10;      if(lx&gt; 0) depth++;&#10;      if(ay==0 &amp;&amp;  lup &amp;&amp; by&gt;ay) depth--; // hit vertex, both up&#10;      if(ay==0 &amp;&amp; !lup &amp;&amp; by&lt;ay) depth--; // hit vertex, both down&#10;      lup = by&gt;ay;&#10;    }&#10;    //console.log(depth);&#10;    return (depth &amp; 1) == 1;&#10;  }&#10;  &#10;  PolyK.Slice = function(p, ax, ay, bx, by)&#10;  {&#10;    if(PolyK.ContainsPoint(p, ax, ay) || PolyK.ContainsPoint(p, bx, by)) return [p.slice(0)];&#10;&#10;    var a = new PolyK._P(ax, ay);&#10;    var b = new PolyK._P(bx, by);&#10;    var iscs = [];  // intersections&#10;    var ps = [];  // points&#10;    for(var i=0; i&lt;p.length; i+=2) ps.push(new PolyK._P(p[i], p[i+1]));&#10;    &#10;    for(var i=0; i&lt;ps.length; i++)&#10;    {&#10;      var isc = new PolyK._P(0,0);&#10;      isc = PolyK._GetLineIntersection(a, b, ps[i], ps[(i+1)%ps.length], isc);&#10;      var fisc = iscs[0];&#10;      var lisc = iscs[iscs.length-1];&#10;      if(isc &amp;&amp; (fisc==null || PolyK._P.dist(isc,fisc)&gt;1e-10) &amp;&amp; (lisc==null || PolyK._P.dist(isc,lisc)&gt;1e-10 ) )//&amp;&amp; (isc.x!=ps[i].x || isc.y!=ps[i].y) )&#10;      {&#10;        isc.flag = true;&#10;        iscs.push(isc);&#10;        ps.splice(i+1,0,isc);&#10;        i++;&#10;      }&#10;    }&#10;    &#10;    if(iscs.length &lt;2) return [p.slice(0)];&#10;    var comp = function(u,v) { return PolyK._P.dist(a,u) - PolyK._P.dist(a,v); }&#10;    iscs.sort(comp);&#10;    &#10;    //console.log(&quot;Intersections: &quot;+iscs.length, JSON.stringify(iscs));&#10;    &#10;    var pgs = [];&#10;    var dir = 0;&#10;    while(iscs.length &gt; 0)&#10;    {&#10;      var n = ps.length;&#10;      var i0 = iscs[0];&#10;      var i1 = iscs[1];&#10;      //if(i0.x==i1.x &amp;&amp; i0.y==i1.y) { iscs.splice(0,2); continue;}&#10;      var ind0 = ps.indexOf(i0);&#10;      var ind1 = ps.indexOf(i1);&#10;      var solved = false;&#10;      &#10;      //console.log(i0, i1);&#10;      &#10;      if(PolyK._firstWithFlag(ps, ind0) == ind1) solved = true;&#10;      else&#10;      {&#10;        i0 = iscs[1];&#10;        i1 = iscs[0];&#10;        ind0 = ps.indexOf(i0);&#10;        ind1 = ps.indexOf(i1);&#10;        if(PolyK._firstWithFlag(ps, ind0) == ind1) solved = true;&#10;      }&#10;      if(solved)&#10;      {&#10;        dir--;&#10;        var pgn = PolyK._getPoints(ps, ind0, ind1);&#10;        pgs.push(pgn);&#10;        ps = PolyK._getPoints(ps, ind1, ind0);&#10;        i0.flag = i1.flag = false;&#10;        iscs.splice(0,2);&#10;        if(iscs.length == 0) pgs.push(ps);&#10;      }&#10;      else { dir++; iscs.reverse(); }&#10;      if(dir&gt;1) break;&#10;    }&#10;    var result = [];&#10;    for(var i=0; i&lt;pgs.length; i++)&#10;    {&#10;      var pg = pgs[i];&#10;      var npg = [];&#10;      for(var j=0; j&lt;pg.length; j++) npg.push(pg[j].x, pg[j].y);&#10;      result.push(npg);&#10;    }&#10;    return result;&#10;  }&#10;  &#10;  PolyK.Raycast = function(p, x, y, dx, dy, isc)&#10;  {&#10;    var l = p.length - 2;&#10;    var tp = PolyK._tp;&#10;    var a1 = tp[0], a2 = tp[1], &#10;    b1 = tp[2], b2 = tp[3], c = tp[4];&#10;    a1.x = x; a1.y = y;&#10;    a2.x = x+dx; a2.y = y+dy;&#10;    &#10;    if(isc==null) isc = {dist:0, edge:0, norm:{x:0, y:0}, refl:{x:0, y:0}};&#10;    isc.dist = Infinity;&#10;    &#10;    for(var i=0; i&lt;l; i+=2)&#10;    {&#10;      b1.x = p[i  ];  b1.y = p[i+1];&#10;      b2.x = p[i+2];  b2.y = p[i+3];&#10;      var nisc = PolyK._RayLineIntersection(a1, a2, b1, b2, c);&#10;      if(nisc) PolyK._updateISC(dx, dy, a1, b1, b2, c, i/2, isc);&#10;    }&#10;    b1.x = b2.x;  b1.y = b2.y;&#10;    b2.x = p[0];  b2.y = p[1];&#10;    var nisc = PolyK._RayLineIntersection(a1, a2, b1, b2, c);&#10;    if(nisc) PolyK._updateISC(dx, dy, a1, b1, b2, c, (p.length/2)-1, isc);&#10;    &#10;    return (isc.dist != Infinity) ? isc : null;&#10;  }&#10;  &#10;  PolyK.ClosestEdge = function(p, x, y, isc)&#10;  {&#10;    var l = p.length - 2;&#10;    var tp = PolyK._tp;&#10;    var a1 = tp[0], &#10;    b1 = tp[2], b2 = tp[3], c = tp[4];&#10;    a1.x = x; a1.y = y;&#10;    &#10;    if(isc==null) isc = {dist:0, edge:0, point:{x:0, y:0}, norm:{x:0, y:0}};&#10;    isc.dist = Infinity;&#10;    &#10;    for(var i=0; i&lt;l; i+=2)&#10;    {&#10;      b1.x = p[i  ];  b1.y = p[i+1];&#10;      b2.x = p[i+2];  b2.y = p[i+3];&#10;      PolyK._pointLineDist(a1, b1, b2, i&gt;&gt;1, isc);&#10;    }&#10;    b1.x = b2.x;  b1.y = b2.y;&#10;    b2.x = p[0];  b2.y = p[1];&#10;    PolyK._pointLineDist(a1, b1, b2, l&gt;&gt;1, isc);&#10;    &#10;    var idst = 1/isc.dist;&#10;    isc.norm.x = (x-isc.point.x)*idst;&#10;    isc.norm.y = (y-isc.point.y)*idst;&#10;    return isc;&#10;  }&#10;  &#10;  PolyK._pointLineDist = function(p, a, b, edge, isc)&#10;  {&#10;    var x = p.x, y = p.y, x1 = a.x, y1 = a.y, x2 = b.x, y2 = b.y;&#10;    &#10;    var A = x - x1;&#10;    var B = y - y1;&#10;    var C = x2 - x1;&#10;    var D = y2 - y1;&#10;&#10;    var dot = A * C + B * D;&#10;    var len_sq = C * C + D * D;&#10;    var param = dot / len_sq;&#10;&#10;    var xx, yy;&#10;&#10;    if (param &lt; 0 || (x1 == x2 &amp;&amp; y1 == y2)) {&#10;      xx = x1;&#10;      yy = y1;&#10;    }&#10;    else if (param &gt; 1) {&#10;      xx = x2;&#10;      yy = y2;&#10;    }&#10;    else {&#10;      xx = x1 + param * C;&#10;      yy = y1 + param * D;&#10;    }&#10;&#10;    var dx = x - xx;&#10;    var dy = y - yy;&#10;    var dst = Math.sqrt(dx * dx + dy * dy);&#10;    if(dst&lt;isc.dist)&#10;    {&#10;      isc.dist = dst;&#10;      isc.edge = edge;&#10;      isc.point.x = xx;&#10;      isc.point.y = yy;&#10;    }&#10;  }&#10;  &#10;  PolyK._updateISC = function(dx, dy, a1, b1, b2, c, edge, isc)&#10;  {&#10;    var nrl = PolyK._P.dist(a1, c);&#10;    if(nrl&lt;isc.dist)&#10;    {&#10;      var ibl = 1/PolyK._P.dist(b1, b2);&#10;      var nx = -(b2.y-b1.y)*ibl;&#10;      var ny =  (b2.x-b1.x)*ibl;&#10;      var ddot = 2*(dx*nx+dy*ny);&#10;      isc.dist = nrl;&#10;      isc.norm.x = nx;  &#10;      isc.norm.y = ny; &#10;      isc.refl.x = -ddot*nx+dx;&#10;      isc.refl.y = -ddot*ny+dy;&#10;      isc.edge = edge;&#10;    }&#10;  }&#10;  &#10;  PolyK._getPoints = function(ps, ind0, ind1)&#10;  {&#10;    var n = ps.length;&#10;    var nps = [];&#10;    if(ind1&lt;ind0) ind1 += n;&#10;    for(var i=ind0; i&lt;= ind1; i++) nps.push(ps[i%n]);&#10;    return nps;&#10;  }&#10;  &#10;  PolyK._firstWithFlag = function(ps, ind)&#10;  {&#10;    var n = ps.length;&#10;    while(true)&#10;    {&#10;      ind = (ind+1)%n;&#10;      if(ps[ind].flag) return ind;&#10;    }&#10;  }&#10;  &#10;  PolyK._PointInTriangle = function(px, py, ax, ay, bx, by, cx, cy)&#10;  {&#10;    var v0x = cx-ax;&#10;    var v0y = cy-ay;&#10;    var v1x = bx-ax;&#10;    var v1y = by-ay;&#10;    var v2x = px-ax;&#10;    var v2y = py-ay;&#10;    &#10;    var dot00 = v0x*v0x+v0y*v0y;&#10;    var dot01 = v0x*v1x+v0y*v1y;&#10;    var dot02 = v0x*v2x+v0y*v2y;&#10;    var dot11 = v1x*v1x+v1y*v1y;&#10;    var dot12 = v1x*v2x+v1y*v2y;&#10;    &#10;    var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);&#10;    var u = (dot11 * dot02 - dot01 * dot12) * invDenom;&#10;    var v = (dot00 * dot12 - dot01 * dot02) * invDenom;&#10;&#10;    // Check if point is in triangle&#10;    return (u &gt;= 0) &amp;&amp; (v &gt;= 0) &amp;&amp; (u + v &lt; 1);&#10;  }&#10;  &#10;  PolyK._RayLineIntersection = function(a1, a2, b1, b2, c)&#10;  {&#10;    var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);&#10;    var day = (a1.y-a2.y), dby = (b1.y-b2.y);&#10;&#10;    var Den = dax*dby - day*dbx;&#10;    if (Den == 0) return null;  // parallel&#10;    &#10;    var A = (a1.x * a2.y - a1.y * a2.x);&#10;    var B = (b1.x * b2.y - b1.y * b2.x);&#10;    &#10;    var I = c;&#10;    var iDen = 1/Den;&#10;    I.x = ( A*dbx - dax*B ) * iDen;&#10;    I.y = ( A*dby - day*B ) * iDen;&#10;    &#10;    if(!PolyK._InRect(I, b1, b2)) return null;&#10;    if((day&gt;0 &amp;&amp; I.y&gt;a1.y) || (day&lt;0 &amp;&amp; I.y&lt;a1.y)) return null; &#10;    if((dax&gt;0 &amp;&amp; I.x&gt;a1.x) || (dax&lt;0 &amp;&amp; I.x&lt;a1.x)) return null; &#10;    return I;&#10;  }&#10;  &#10;  PolyK._GetLineIntersection = function(a1, a2, b1, b2, c)&#10;  {&#10;    var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);&#10;    var day = (a1.y-a2.y), dby = (b1.y-b2.y);&#10;&#10;    var Den = dax*dby - day*dbx;&#10;    if (Den == 0) return null;  // parallel&#10;    &#10;    var A = (a1.x * a2.y - a1.y * a2.x);&#10;    var B = (b1.x * b2.y - b1.y * b2.x);&#10;    &#10;    var I = c;&#10;    I.x = ( A*dbx - dax*B ) / Den;&#10;    I.y = ( A*dby - day*B ) / Den;&#10;    &#10;    if(PolyK._InRect(I, a1, a2) &amp;&amp; PolyK._InRect(I, b1, b2)) return I;&#10;    return null;&#10;  }&#10;  &#10;  PolyK._InRect = function(a, b, c) // a in rect (b,c)&#10;  {&#10;    var minx = Math.min(b.x,c.x), maxx = Math.max(b.x,c.x);&#10;    var miny = Math.min(b.y,c.y), maxy = Math.max(b.y,c.y);&#10;    &#10;    if  (minx == maxx) return (miny&lt;=a.y &amp;&amp; a.y&lt;=maxy);&#10;    if  (miny == maxy) return (minx&lt;=a.x &amp;&amp; a.x&lt;=maxx);&#10;    &#10;    //return (minx &lt;= a.x &amp;&amp; a.x &lt;= maxx &amp;&amp; miny &lt;= a.y &amp;&amp; a.y &lt;= maxy)&#10;    return (minx &lt;= a.x+1e-10 &amp;&amp; a.x-1e-10 &lt;= maxx &amp;&amp; miny &lt;= a.y+1e-10 &amp;&amp; a.y-1e-10 &lt;= maxy) ;   &#10;  }&#10;  &#10;  PolyK._convex = function(ax, ay, bx, by, cx, cy)&#10;  {&#10;    return (ay-by)*(cx-bx) + (bx-ax)*(cy-by) &gt;= 0;&#10;  }&#10;    &#10;  PolyK._P = function(x,y)&#10;  {&#10;    this.x = x;&#10;    this.y = y;&#10;    this.flag = false;&#10;  }&#10;  PolyK._P.prototype.toString = function()&#10;  {&#10;    return &quot;Point [&quot;+this.x+&quot;, &quot;+this.y+&quot;]&quot;;&#10;  }&#10;  PolyK._P.dist = function(a,b)&#10;  {&#10;    var dx = b.x-a.x;&#10;    var dy = b.y-a.y;&#10;    return Math.sqrt(dx*dx + dy*dy);&#10;  }&#10;  &#10;  PolyK._tp = [];&#10;  for(var i=0; i&lt;10; i++) PolyK._tp.push(new PolyK._P(0,0));&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/ContainerLocation.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 550.0]">
        </property>
        <property name="Boundary" class="ptolemy.data.expr.Parameter" value="5.18,-0.06,-7.9,-0.06,-7.9,7.822,-1.07,7.822,-1.07,4.94,5.18,4.94">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="LocationIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="LocationOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="GoCommandFilter" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Filter location updates that are close to each other&#10; *&#10; *&#10; *  @accessor GoCommandFilter&#10; *&#10;*/&#10;&#10;var thresh;&#10;&#10;var last_sent_cmd = null;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('CommandIn');&#10;  output('CommandOut');&#10;&#10;  parameter('Threshold', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  thresh = getParameter('Threshold');&#10;&#10;  addInputHandler('CommandIn', CommandIn_In);&#10;}&#10;&#10;function dist (x1, y1, x2, y2) {&#10;  var dx = x2-x1;&#10;  var dy = y2-y1;&#10;  return Math.sqrt(dx*dx + dy*dy);&#10;}&#10;&#10;var CommandIn_In = function () {&#10;  var c = get('CommandIn');&#10;&#10;  if (c.command == 'Go') {&#10;    // We only care about filtering &quot;Go&quot; packets&#10;&#10;    if (last_sent_cmd == null) {&#10;      // Got first packet&#10;      last_sent_cmd = c;&#10;      send('CommandOut', c);&#10;    &#10;    } else {&#10;&#10;      // See if this is too close to the last point we sent.&#10;      // If it is, don't send it, otherwise do.&#10;      var old_x = last_sent_cmd.X;&#10;      var old_y = last_sent_cmd.Y;&#10;      var new_x = c.X;&#10;      var new_y = c.Y;&#10;&#10;      var d = dist(old_x, old_y, new_x, new_y);&#10;&#10;      if (d &gt; thresh) {&#10;        // Actually send this point&#10;        last_sent_cmd = c;&#10;        send('CommandOut', c);&#10;      }&#10;&#10;    }&#10;&#10;  } else {&#10;    // We just forward all other commands&#10;    send('CommandOut', c);&#10;  }&#10;&#10;}&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/GoCommandFilter.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1005.0, 500.0]">
        </property>
        <property name="Threshold" class="ptolemy.data.expr.Parameter" value="poseUpdateThreshold">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CommandIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="CommandOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="GoCommandFilter2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Filter location updates that are close to each other&#10; *&#10; *&#10; *  @accessor GoCommandFilter&#10; *&#10;*/&#10;&#10;var thresh;&#10;&#10;var last_sent_cmd = null;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('CommandIn');&#10;  output('CommandOut');&#10;&#10;  parameter('Threshold', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  thresh = getParameter('Threshold');&#10;&#10;  addInputHandler('CommandIn', CommandIn_In);&#10;}&#10;&#10;function dist (x1, y1, x2, y2) {&#10;  var dx = x2-x1;&#10;  var dy = y2-y1;&#10;  return Math.sqrt(dx*dx + dy*dy);&#10;}&#10;&#10;var CommandIn_In = function () {&#10;  var c = get('CommandIn');&#10;&#10;  if (c.command == 'Go') {&#10;    // We only care about filtering &quot;Go&quot; packets&#10;&#10;    if (last_sent_cmd == null) {&#10;      // Got first packet&#10;      last_sent_cmd = c;&#10;      send('CommandOut', c);&#10;    &#10;    } else {&#10;&#10;      // See if this is too close to the last point we sent.&#10;      // If it is, don't send it, otherwise do.&#10;      var old_x = last_sent_cmd.X;&#10;      var old_y = last_sent_cmd.Y;&#10;      var new_x = c.X;&#10;      var new_y = c.Y;&#10;&#10;      var d = dist(old_x, old_y, new_x, new_y);&#10;&#10;      if (d &gt; thresh) {&#10;        // Actually send this point&#10;        last_sent_cmd = c;&#10;        send('CommandOut', c);&#10;      }&#10;&#10;    }&#10;&#10;  } else {&#10;    // We just forward all other commands&#10;    send('CommandOut', c);&#10;  }&#10;&#10;}&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/GoCommandFilter.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="true">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1005.0, 620.0]">
        </property>
        <property name="Threshold" class="ptolemy.data.expr.Parameter" value="poseUpdateThreshold">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CommandIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="CommandOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="GoCommandFilter3" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Filter location updates that are close to each other&#10; *&#10; *&#10; *  @accessor GoCommandFilter&#10; *&#10;*/&#10;&#10;var thresh;&#10;&#10;var last_sent_cmd = null;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('CommandIn');&#10;  output('CommandOut');&#10;&#10;  parameter('Threshold', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  thresh = getParameter('Threshold');&#10;&#10;  addInputHandler('CommandIn', CommandIn_In);&#10;}&#10;&#10;function dist (x1, y1, x2, y2) {&#10;  var dx = x2-x1;&#10;  var dy = y2-y1;&#10;  return Math.sqrt(dx*dx + dy*dy);&#10;}&#10;&#10;var CommandIn_In = function () {&#10;  var c = get('CommandIn');&#10;&#10;  if (c.command == 'Go') {&#10;    // We only care about filtering &quot;Go&quot; packets&#10;&#10;    if (last_sent_cmd == null) {&#10;      // Got first packet&#10;      last_sent_cmd = c;&#10;      send('CommandOut', c);&#10;    &#10;    } else {&#10;&#10;      // See if this is too close to the last point we sent.&#10;      // If it is, don't send it, otherwise do.&#10;      var old_x = last_sent_cmd.X;&#10;      var old_y = last_sent_cmd.Y;&#10;      var new_x = c.X;&#10;      var new_y = c.Y;&#10;&#10;      var d = dist(old_x, old_y, new_x, new_y);&#10;&#10;      if (d &gt; thresh) {&#10;        // Actually send this point&#10;        last_sent_cmd = c;&#10;        send('CommandOut', c);&#10;      }&#10;&#10;    }&#10;&#10;  } else {&#10;    // We just forward all other commands&#10;    send('CommandOut', c);&#10;  }&#10;&#10;}&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/GoCommandFilter.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1005.0, 735.0]">
        </property>
        <property name="Threshold" class="ptolemy.data.expr.Parameter" value="poseUpdateThreshold">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CommandIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="CommandOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="GoCommandFilter4" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Filter location updates that are close to each other&#10; *&#10; *&#10; *  @accessor GoCommandFilter&#10; *&#10;*/&#10;&#10;var thresh;&#10;&#10;var last_sent_cmd = null;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('CommandIn');&#10;  output('CommandOut');&#10;&#10;  parameter('Threshold', {&#10;    type: 'number'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  thresh = getParameter('Threshold');&#10;&#10;  addInputHandler('CommandIn', CommandIn_In);&#10;}&#10;&#10;function dist (x1, y1, x2, y2) {&#10;  var dx = x2-x1;&#10;  var dy = y2-y1;&#10;  return Math.sqrt(dx*dx + dy*dy);&#10;}&#10;&#10;var CommandIn_In = function () {&#10;  var c = get('CommandIn');&#10;&#10;  if (c.command == 'Go') {&#10;    // We only care about filtering &quot;Go&quot; packets&#10;&#10;    if (last_sent_cmd == null) {&#10;      // Got first packet&#10;      last_sent_cmd = c;&#10;      send('CommandOut', c);&#10;    &#10;    } else {&#10;&#10;      // See if this is too close to the last point we sent.&#10;      // If it is, don't send it, otherwise do.&#10;      var old_x = last_sent_cmd.X;&#10;      var old_y = last_sent_cmd.Y;&#10;      var new_x = c.X;&#10;      var new_y = c.Y;&#10;&#10;      var d = dist(old_x, old_y, new_x, new_y);&#10;&#10;      if (d &gt; thresh) {&#10;        // Actually send this point&#10;        last_sent_cmd = c;&#10;        send('CommandOut', c);&#10;      }&#10;&#10;    }&#10;&#10;  } else {&#10;    // We just forward all other commands&#10;    send('CommandOut', c);&#10;  }&#10;&#10;}&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/GoCommandFilter.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1005.0, 850.0]">
        </property>
        <property name="Threshold" class="ptolemy.data.expr.Parameter" value="poseUpdateThreshold">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="CommandIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="CommandOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="WebSocketServer3" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor starts a server that listens for web socket&#10; *  connection requests on the specified hostInterface and port.  The&#10; *  hostInterface is needed only if the host machine has more than one&#10; *  network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; *  not resolve to the desired interface.&#10; *&#10; *  &lt;p&gt;The output &lt;code&gt;connection&lt;/code&gt; reports the when a&#10; *  connection is opened or closed.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When a message arrives on a connection, a &lt;code&gt;received&lt;/code&gt;&#10; *  output is produced with that message.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When an input arrives on &lt;code&gt;toSend&lt;/code&gt;, then a message is&#10; *  sent to one or all of the open socket connections.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the&#10; *  server and all connections.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;The messages can be any type that has a JSON representation.&#10; *  For incomming messages, this accessor assumes that the message is&#10; *  a string in UTF-8 that encodes a JSON object.&lt;/p&gt;&#10; *&#10; *  &lt;p&gt;This accessor requires the module webSocket.&lt;/p&gt;&#10; *&#10; *  @accessor WebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {number} port The port to listen to for connections.&#10; *  @input toSend The data to be sent to open sockets. If this is an object with 'socketID' field and a 'message' field, then send the value of the message field to the socket identified by the socketID field. If the input has any other form, then the message is broadcast to all open socket connections.&#10; *  @output connection An output produced when a connection opens or closes. The output is an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'status' field, which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'message' field, which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee &#10; *  @version $$Id: WebSocketServer.js 234 2015-08-01 22:06:40Z eal $$ &#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;var server = null;&#10;var running = false;&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function() {&#10;    parameter('hostInterface', {&#10;        value: &quot;localhost&quot;, &#10;        type: &quot;string&quot; &#10;    });&#10;    parameter('port', {&#10;        value: 8080, &#10;        type: &quot;int&quot; &#10;    });&#10;    input('toSend');&#10;    output('received');&#10;    output('connection');&#10;}&#10;&#10;var handle;&#10;var sockets = [];&#10;&#10;/** Starts the web socket and attaches functions to inputs and outputs. &#10;  * Adds an input handler on toSend that sends the input received to the right socket. */ &#10;exports.initialize = function() {&#10;    if (!server) {&#10;        server = new WebSocket.Server({'port':getParameter('port'),&#10;                                       'hostInterface':getParameter('hostInterface')});&#10;        server.on('listening', onListening);&#10;        server.on('connection', onConnection);&#10;        server.start();&#10;    }&#10;    running = true;&#10;&#10;    handle = addInputHandler('toSend', function() {&#10;        var data = get('toSend');&#10;        // Careful: Don't do if (data) because if data === 0, then data is false.&#10;        if (data !== null) {&#10;            if ((data.socketID != null)  &amp;&amp; (data.message != null)) {&#10;                // data has the right form for a point-to-point send.&#10;                if (sockets[data.socketID] &amp;&amp; sockets[data.socketID].isOpen()) {&#10;                    // id matches this socket.&#10;                    console.log(&quot;Sending to socket id &quot; &#10;                            + data.socketID&#10;                            + &quot; message: &quot;&#10;                            + data.message);&#10;                    sockets[data.socketID].send(data.message);&#10;                } else {&#10;                    console.log('Socket with ID ' + data.socketID&#10;                            + ' is not open. Discarding message: ' + data.message);&#10;                }&#10;            } else {&#10;                // No socketID or message, so this is a broadcast message.&#10;                var success = false;&#10;                for (var id = 0; id &lt; sockets.length; id++) {&#10;                    if (sockets[id].isOpen()) {&#10;                        console.log(&quot;Broadcasting to socket id &quot; + id &#10;                                + &quot; message: &quot; + data);&#10;                        sockets[id].send(data);&#10;                        success = true;&#10;                    }&#10;                }&#10;                if (!success) {&#10;                    console.log('No open sockets. Discarding message: ' + data.message);&#10;                }&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function onListening() {&#10;    console.log('Server: Listening for socket connection requests.');&#10;}&#10;&#10;/** Executes when a connection has been establised.&lt;br&gt;&#10; *  Triggers an output on &lt;code&gt;'connection'&lt;/code&gt;.&#10; *  Adds an event listener to the socket. */&#10;function onConnection(socket) {&#10;   //socketID is the index of the socket in the sockets array. &#10;    var socketID = sockets.length;&#10;    console.log('Server: new socket established with ID: ' + socketID);&#10;    send('connection', {'socketID':socketID, 'status':'open'});&#10;    socket.on('message', function(message) {&#10;        send('received', {'socketID':socketID, 'message':message});&#10;    });&#10;    socket.on('close', function(message) {&#10;        send('connection', {'socketID':socketID, 'status':'closed'});&#10;    });&#10;&#10;    sockets.push(socket);    &#10;}&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server. */&#10;exports.wrapup = function(){&#10;    for (var i = 0; i &lt; sockets.length; i++) {&#10;        sockets[i].removeAllListeners();&#10;    }&#10;&#10;    sockets = [];&#10;    removeInputHandler(handle); &#10;&#10;    if (server != null) {&#10;        server.removeAllListeners();&#10;        server.close();&#10;        server = null;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/WebSocketServer.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="JSAccessorIcon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-36.0, -29.0]">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="74.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="64.0">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.8,1.0,1.0}">
                </property>
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="30">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="italic" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="WS">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-16.0, -12.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={348, 412, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="{-25.0, 3.0}">
                </property>
                <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="14.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="60.99999999999999">
                </property>
                <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                </property>
                <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 10.0, -10.0, 0.0, -20.0}">
                </property>
                <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{0.0, 0.0}">
            </property>
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8084">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[420.0, 1240.0]">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="OpStrip2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Strips out a certain key's value from an object.&#10; *&#10; *  @accessor OpStrip&#10; *&#10;*/&#10;&#10;// Filter params&#10;var key;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  //&#10;  // Parameters&#10;  //&#10;  // key to extract the value from&#10;  parameter('key', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  addInputHandler('Input', Input_in);&#10;  key = getParameter('key');&#10;}&#10;&#10;var Input_in = function () {&#10;  var i = get('Input');&#10;&#10;  if (typeof i === 'object' &amp;&amp; key in i &amp;&amp; i.hasOwnProperty(key)) {&#10;    send('Output', i[key]);&#10;  }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpStrip.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="key" class="ptolemy.data.expr.Parameter" value="message">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 1240.0]">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-8.0, 0.0]">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="45.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="33.0">
                </property>
                <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.8,0.6,1.0}">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={391, 492, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="24">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                </property>
                <property name="fontFamily" class="ptolemy.data.expr.StringParameter" value="sans-serif">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="v">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -11.0]">
                </property>
            </property>
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="Display14" class="ptolemy.actor.lib.gui.Display">
        <display name="Applause Status"/>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={72, 522, 759, 306}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[759, 262]">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="Applause Status">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[640.0, 1240.0]">
        </property>
    </entity>
    <entity name="OpAddKeyValue3" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="id">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="Home1">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 690.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue4" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="id">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="Home2">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 740.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue5" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="id">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="Home3">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 790.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="LocationRosPublisher" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of Michigan.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Publish location X,Y,Z coordinates as a PointCloud to a ROS topic.&#10; *&#10; *  Incoming packets should have at least these keys:&#10; *     {&#10; *       X: &lt;x coordinate&gt;,&#10; *       Y: &lt;y coordinate&gt;,&#10; *       id: &lt;unique id for this location&gt;  &#10; *     }&#10; *&#10; *  All locations are published as a PointCloud so that the ROS visualization&#10; *  only needs to subscribe to one topic.&#10; *&#10; *  @accessor robotics/LocationRosPublisher&#10; *  @parameter {string} topic The ROS topic to publish to.&#10; *  @parameter {string} frame_id The frame_id of the header (only needed if a header is required).&#10; *  @author Brad Campbell &#10; *  @version $$Id: RosPublisher.js 271 2015-08-22 08:23:01Z eal $$ &#10; */&#10;&#10;&#10;ROS_TYPE = 'sensor_msgs/PointCloud';&#10;&#10;// location_id -&gt; {position: {X, Y, Z}, color: &lt;some color as a float&gt;}&#10;locations = {};&#10;&#10;/** Sets up by accessor by inheriting inputs from setup() in WebSocketClient. Adds additional parameters regarding the ROS topic to publish to. */ &#10;exports.setup = function() {&#10;   extend('net/WebSocketClient');&#10;   parameter('topic', {&#10;      type: &quot;string&quot;&#10;   });&#10;   parameter('frame_id', {&#10;      type: &quot;string&quot;,&#10;      value: &quot;&quot;&#10;   });&#10;}&#10;&#10;/**  Inherits initialize from WebSocketClient. &#10; *   Advertise the topic we are publishing to.*/ &#10;exports.initialize = function() {&#10;   this.ssuper.initialize.apply(this);&#10;&#10;   var advertise = {&#10;      &quot;op&quot;: &quot;advertise&quot;,&#10;      &quot;topic&quot;: getParameter('topic'),&#10;      &quot;type&quot;: ROS_TYPE&#10;   };&#10;   exports.sendToWebSocket(advertise);&#10;}&#10;&#10;function random_color () {&#10;   var letters = '0123456789ABCDEF'.split('');&#10;   var color = '0x';&#10;   for (var i = 0; i &lt; 6; i++ ) {&#10;      color += letters[Math.floor(Math.random() * 16)];&#10;   }&#10;   return parseInt(color, 16);&#10;&#10;}&#10;&#10;/** Override inputHandler on 'toSend' from WebSocketClient */&#10;exports.toSendInputHandler = function() {&#10;   var msg = get('toSend');&#10;&#10;   // Update the current location map with this incoming packet&#10;   var id = msg.id;&#10;   var x = msg.X || 0;&#10;   var y = msg.Y || 0;&#10;   var z = msg.Z || 0;&#10;&#10;   // Check if this ID already has a color&#10;   var color = 0.0;&#10;   if (id in locations) {&#10;      color = locations[id].color;&#10;   } else {&#10;      color = random_color();&#10;   }&#10;&#10;   // Actually update the record&#10;   locations[id] = {&#10;      position: {&#10;         x: x,&#10;         y: y,&#10;         z: z&#10;      },&#10;      color: color&#10;   };&#10;&#10;   // Create arrays we can publish&#10;   var location_points = [];&#10;   var colors = [];&#10;   Object.keys(locations).forEach(function (key) {&#10;      location_points.push(locations[key].position);&#10;      colors.push(locations[key].color);&#10;   });&#10;&#10;   var out = {&#10;      header: {&#10;         frame_id: getParameter('frame_id')&#10;      },&#10;      points: location_points,&#10;      channels: [&#10;         {&#10;            name: 'rgb',&#10;            values: colors&#10;         }&#10;      ]&#10;   };&#10;      &#10;   var data = {&#10;      &quot;op&quot;: &quot;publish&quot;,&#10;      &quot;topic&quot;: getParameter('topic'),&#10;      &quot;msg&quot;: out &#10;   }&#10;&#10;   exports.sendToWebSocket(data);&#10;}&#10;&#10;&#10;&#10;/** Unadvertise the topic and inherit wrapup from WebSocketClient */&#10;exports.wrapup = function() {&#10;   var unadvertise = {&#10;      &quot;op&quot;: &quot;unadvertise&quot;,&#10;      &quot;topic&quot;: getParameter('topic')&#10;   };&#10;   exports.sendToWebSocket(unadvertise);&#10;   this.ssuper.wrapup();&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/robotics/LocationRosPublisher.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[585.0, 445.0]">
        </property>
        <property name="server" class="ptolemy.data.expr.Parameter" value="192.168.11.108">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="connectTimeout" class="ptolemy.data.expr.Parameter" value="60000">
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.Parameter" value="/alps/locations">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="frame_id" class="ptolemy.data.expr.Parameter" value="map_hokuyo">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
            <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="0.5, -0.5">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="129.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="57.0">
                </property>
                <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                </property>
                <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-10.0, 0.0]">
                </property>
                <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="6">
                </property>
                <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.4,0.6,1.0,1.0}">
                </property>
                <property name="x" class="ptolemy.data.expr.Parameter" value="20">
                </property>
                <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="10">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                </property>
                <property name="fontFamily" class="ptolemy.data.expr.StringParameter" value="Courier New">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="{x,y,z}">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-61.0, -8.0]">
                </property>
            </property>
            <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[12.0, 0.0]">
                </property>
                <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="15.0">
                </property>
                <property name="height" class="ptolemy.data.expr.Parameter" value="23.0">
                </property>
                <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.4,0.6,1.0,1.0}">
                </property>
                <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 1.0, 1.0, 0.0, 2.0}">
                </property>
            </property>
            <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
                </property>
                <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.4,0.6,1.0,1.0}">
                </property>
                <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="ROS">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[20.0, -11.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={350, 284, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Publish location X,Y,Z coordinates as a PointCloud to a ROS topic.&lt;/p&gt;&#10;&lt;p&gt; Incoming packets should have at least these keys:&#10;    {&#10;      X: &lt;x coordinate&gt;,&#10;      Y: &lt;y coordinate&gt;,&#10;      id: &lt;unique id for this location&gt;&lt;br&gt;    }&lt;/p&gt;&#10;&lt;p&gt; All locations are published as a PointCloud so that the ROS visualization&#10; only needs to subscribe to one topic.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Brad Campbell">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$Id: RosPublisher.js 271 2015-08-22 08:23:01Z eal $">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The ROS topic to publish to.">
            </property>
            <property name="frame_id (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The frame_id of the header (only needed if a header is required).">
            </property>
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1165.0, 545.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1165.0, 665.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="MicrostepDelay3" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1165.0, 780.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="MicrostepDelay4" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1165.0, 895.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="WebSocketServer4" class="org.terraswarm.accessor.JSAccessor">
        <display name="RobotStatusServer"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor starts a server that listens for web socket&#10; *  connection requests on the specified hostInterface and port.  The&#10; *  hostInterface is needed only if the host machine has more than one&#10; *  network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; *  not resolve to the desired interface.&#10; *&#10; *  The output `connection` reports the when a&#10; *  connection is opened or closed.&#10; *&#10; *  When a message arrives on a connection, a `received`&#10; *  output is produced with that message. The maxFrameSize parameter limits the size&#10; *  of received messages, and any attempt to send to this client a larger message&#10; *  will cause an error.&#10; *&#10; *  When an input arrives on `toSend`, then a message is&#10; *  sent to one or all of the open socket connections.&#10; *&#10; *  When `wrapup()` is invoked, this accessor closes the&#10; *  server and all connections.&#10; *&#10; *  The default type for both sending and receiving&#10; *  is 'application/json', which allows sending and receiving anything that has&#10; *  a string representation in JSON. The types supported by this implementation&#10; *  include at least:&#10; *  * __application/json__: The send() function uses JSON.stringify() and sends the&#10; *    result with a UTF-8 encoding. An incoming byte stream will be parsed as JSON,&#10; *    and if the parsing fails, will be provided as a string interpretation of the byte&#10; *    stream.&#10; *  * __text/\*__: Any text type is sent as a string encoded in UTF-8.&#10; *  * __image/x__: Where __x__ is one of __json__, __png__, __gif__,&#10; *    and more.&#10; *    In this case, the data passed to send() is assumed to be an image, as encoded&#10; *    on the host, and the image will be encoded as a byte stream in the specified&#10; *    format before sending.  A received byte stream will be decoded as an image,&#10; *    if possible.&#10; *&#10; *  This accessor requires the module webSocket.&#10; *&#10; *  @accessor net/WebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {int} port The port to listen to for connections.&#10; *  @parameter {string} receiveType The MIME type for incoming messages, which defaults to 'application/json'.&#10; *  @parameter {string} sendType The MIME type for outgoing messages, which defaults to 'application/json'.&#10; *  @parameter {int} maxFrameSize The maximum frame size for a received message (default is 65536).&#10; *  @input toSend The data to be sent to open sockets. If this is an object with 'socketID' field and a 'message' field, then send the value of the message field to the socket identified by the socketID field. If the input has any other form, then the message is broadcast to all open socket connections.&#10; *  @output connection An output produced when a connection opens or closes. The output is an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'status' field, which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'message' field, which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee &#10; *  @version $$Id: WebSocketServer.js 282 2015-08-28 19:04:40Z eal $$ &#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;var server = null;&#10;var running = false;&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function() {&#10;    parameter('hostInterface', {&#10;        value: &quot;localhost&quot;, &#10;        type: &quot;string&quot; &#10;    });&#10;    parameter('port', {&#10;        value: 8080, &#10;        type: &quot;int&quot; &#10;    });&#10;    parameter('receiveType', {&#10;        type : 'string',&#10;        value : 'application/json'&#10;    });&#10;    parameter('sendType', {&#10;        type : 'string',&#10;        value : 'application/json'&#10;    });&#10;    parameter('maxFrameSize', {&#10;        value: 65536, &#10;        type: &quot;int&quot; &#10;    });&#10;    input('toSend');&#10;    output('received');&#10;    output('connection');&#10;}&#10;&#10;var handle;&#10;var sockets = [];&#10;&#10;/** Starts the web socket and attaches functions to inputs and outputs. &#10;  * Adds an input handler on toSend that sends the input received to the right socket. */ &#10;exports.initialize = function() {&#10;    if (!server) {&#10;        server = new WebSocket.Server({&#10;                'port':getParameter('port'),&#10;                'hostInterface':getParameter('hostInterface'),&#10;                'receiveType':getParameter('receiveType'),&#10;                'sendType':getParameter('sendType'),&#10;                'maxFrameSize':getParameter('maxFrameSize')&#10;        });&#10;        server.on('listening', onListening);&#10;        server.on('connection', onConnection);&#10;        server.on('error', function (message) {&#10;            error(message);&#10;        });&#10;        server.start();&#10;    }&#10;    running = true;&#10;&#10;    handle = addInputHandler('toSend', function() {&#10;        var data = get('toSend');&#10;        // Careful: Don't do if (data) because if data === 0, then data is false.&#10;        if (data !== null) {&#10;            if ((data.socketID != null)  &amp;&amp; (data.message != null)) {&#10;                // data has the right form for a point-to-point send.&#10;                if (sockets[data.socketID] &amp;&amp; sockets[data.socketID].isOpen()) {&#10;                    // id matches this socket.&#10;                    console.log(&quot;Sending to socket id &quot; &#10;                            + data.socketID&#10;                            + &quot; message: &quot;&#10;                            + data.message);&#10;                    sockets[data.socketID].send(data.message);&#10;                } else {&#10;                    console.log('Socket with ID ' + data.socketID&#10;                            + ' is not open. Discarding message: ' + data.message);&#10;                }&#10;            } else {&#10;                // No socketID or message, so this is a broadcast message.&#10;                var success = false;&#10;                for (var id = 0; id &lt; sockets.length; id++) {&#10;                    if (sockets[id].isOpen()) {&#10;                        console.log(&quot;Broadcasting to socket id &quot; + id &#10;                                + &quot; message: &quot; + data);&#10;                        sockets[id].send(data);&#10;                        success = true;&#10;                    }&#10;                }&#10;                if (!success) {&#10;                    console.log('No open sockets. Discarding message: ' + data.message);&#10;                }&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function onListening() {&#10;    console.log('Server: Listening for socket connection requests.');&#10;}&#10;&#10;/** Executes when a connection has been establised.&lt;br&gt;&#10; *  Triggers an output on &lt;code&gt;'connection'&lt;/code&gt;.&#10; *  Adds an event listener to the socket. */&#10;function onConnection(socket) {&#10;   //socketID is the index of the socket in the sockets array. &#10;    var socketID = sockets.length;&#10;    console.log('Server: new socket established with ID: ' + socketID);&#10;    send('connection', {'socketID':socketID, 'status':'open'});&#10;    socket.on('message', function(message) {&#10;        send('received', {'socketID':socketID, 'message':message});&#10;    });&#10;    socket.on('close', function(message) {&#10;        send('connection', {'socketID':socketID, 'status':'closed'});&#10;    });&#10;    socket.on('error', function(message) {&#10;        error(message);&#10;    });&#10;&#10;    sockets.push(socket);    &#10;}&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server. */&#10;exports.wrapup = function(){&#10;    for (var i = 0; i &lt; sockets.length; i++) {&#10;        sockets[i].removeAllListeners();&#10;    }&#10;&#10;    sockets = [];&#10;    removeInputHandler(handle); &#10;&#10;    if (server != null) {&#10;        server.removeAllListeners();&#10;        server.close();&#10;        server = null;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/WebSocketServer.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[880.0, 1095.0]">
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8089">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="OpMakeKeyValue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Make a value into a key,value pair.&#10; *&#10; *&#10; *  @accessor OpmakeKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;  var out = {};&#10;  out[key] = i;&#10;&#10;  send('Output', out);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpMakeKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1360.0, 490.0]">
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="battery">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue6" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="robotid">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1455.0, 490.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="WebSocketServer5" class="org.terraswarm.accessor.JSAccessor">
        <display name="RobotBatteryServer"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor starts a server that listens for web socket&#10; *  connection requests on the specified hostInterface and port.  The&#10; *  hostInterface is needed only if the host machine has more than one&#10; *  network interface (e.g. Ethernet and WiFi) and 'localhost' does&#10; *  not resolve to the desired interface.&#10; *&#10; *  The output `connection` reports the when a&#10; *  connection is opened or closed.&#10; *&#10; *  When a message arrives on a connection, a `received`&#10; *  output is produced with that message. The maxFrameSize parameter limits the size&#10; *  of received messages, and any attempt to send to this client a larger message&#10; *  will cause an error.&#10; *&#10; *  When an input arrives on `toSend`, then a message is&#10; *  sent to one or all of the open socket connections.&#10; *&#10; *  When `wrapup()` is invoked, this accessor closes the&#10; *  server and all connections.&#10; *&#10; *  The default type for both sending and receiving&#10; *  is 'application/json', which allows sending and receiving anything that has&#10; *  a string representation in JSON. The types supported by this implementation&#10; *  include at least:&#10; *  * __application/json__: The send() function uses JSON.stringify() and sends the&#10; *    result with a UTF-8 encoding. An incoming byte stream will be parsed as JSON,&#10; *    and if the parsing fails, will be provided as a string interpretation of the byte&#10; *    stream.&#10; *  * __text/\*__: Any text type is sent as a string encoded in UTF-8.&#10; *  * __image/x__: Where __x__ is one of __json__, __png__, __gif__,&#10; *    and more.&#10; *    In this case, the data passed to send() is assumed to be an image, as encoded&#10; *    on the host, and the image will be encoded as a byte stream in the specified&#10; *    format before sending.  A received byte stream will be decoded as an image,&#10; *    if possible.&#10; *&#10; *  This accessor requires the module webSocket.&#10; *&#10; *  @accessor net/WebSocketServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {int} port The port to listen to for connections.&#10; *  @parameter {string} receiveType The MIME type for incoming messages, which defaults to 'application/json'.&#10; *  @parameter {string} sendType The MIME type for outgoing messages, which defaults to 'application/json'.&#10; *  @parameter {int} maxFrameSize The maximum frame size for a received message (default is 65536).&#10; *  @input toSend The data to be sent to open sockets. If this is an object with 'socketID' field and a 'message' field, then send the value of the message field to the socket identified by the socketID field. If the input has any other form, then the message is broadcast to all open socket connections.&#10; *  @output connection An output produced when a connection opens or closes. The output is an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'status' field, which is the string 'open' or 'closed'.&#10; *  @output received A message received a client in the form of an object with two fields, a 'socketID', which is a unique ID for this client connection, and a 'message' field, which is the message received from the client.&#10; *  @author Hokeun Kim, Edward Lee &#10; *  @version $$Id: WebSocketServer.js 282 2015-08-28 19:04:40Z eal $$ &#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;var server = null;&#10;var running = false;&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function() {&#10;    parameter('hostInterface', {&#10;        value: &quot;localhost&quot;, &#10;        type: &quot;string&quot; &#10;    });&#10;    parameter('port', {&#10;        value: 8080, &#10;        type: &quot;int&quot; &#10;    });&#10;    parameter('receiveType', {&#10;        type : 'string',&#10;        value : 'application/json'&#10;    });&#10;    parameter('sendType', {&#10;        type : 'string',&#10;        value : 'application/json'&#10;    });&#10;    parameter('maxFrameSize', {&#10;        value: 65536, &#10;        type: &quot;int&quot; &#10;    });&#10;    input('toSend');&#10;    output('received');&#10;    output('connection');&#10;}&#10;&#10;var handle;&#10;var sockets = [];&#10;&#10;/** Starts the web socket and attaches functions to inputs and outputs. &#10;  * Adds an input handler on toSend that sends the input received to the right socket. */ &#10;exports.initialize = function() {&#10;    if (!server) {&#10;        server = new WebSocket.Server({&#10;                'port':getParameter('port'),&#10;                'hostInterface':getParameter('hostInterface'),&#10;                'receiveType':getParameter('receiveType'),&#10;                'sendType':getParameter('sendType'),&#10;                'maxFrameSize':getParameter('maxFrameSize')&#10;        });&#10;        server.on('listening', onListening);&#10;        server.on('connection', onConnection);&#10;        server.on('error', function (message) {&#10;            error(message);&#10;        });&#10;        server.start();&#10;    }&#10;    running = true;&#10;&#10;    handle = addInputHandler('toSend', function() {&#10;        var data = get('toSend');&#10;        // Careful: Don't do if (data) because if data === 0, then data is false.&#10;        if (data !== null) {&#10;            if ((data.socketID != null)  &amp;&amp; (data.message != null)) {&#10;                // data has the right form for a point-to-point send.&#10;                if (sockets[data.socketID] &amp;&amp; sockets[data.socketID].isOpen()) {&#10;                    // id matches this socket.&#10;                    console.log(&quot;Sending to socket id &quot; &#10;                            + data.socketID&#10;                            + &quot; message: &quot;&#10;                            + data.message);&#10;                    sockets[data.socketID].send(data.message);&#10;                } else {&#10;                    console.log('Socket with ID ' + data.socketID&#10;                            + ' is not open. Discarding message: ' + data.message);&#10;                }&#10;            } else {&#10;                // No socketID or message, so this is a broadcast message.&#10;                var success = false;&#10;                for (var id = 0; id &lt; sockets.length; id++) {&#10;                    if (sockets[id].isOpen()) {&#10;                        console.log(&quot;Broadcasting to socket id &quot; + id &#10;                                + &quot; message: &quot; + data);&#10;                        sockets[id].send(data);&#10;                        success = true;&#10;                    }&#10;                }&#10;                if (!success) {&#10;                    console.log('No open sockets. Discarding message: ' + data.message);&#10;                }&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function onListening() {&#10;    console.log('Server: Listening for socket connection requests.');&#10;}&#10;&#10;/** Executes when a connection has been establised.&lt;br&gt;&#10; *  Triggers an output on &lt;code&gt;'connection'&lt;/code&gt;.&#10; *  Adds an event listener to the socket. */&#10;function onConnection(socket) {&#10;   //socketID is the index of the socket in the sockets array. &#10;    var socketID = sockets.length;&#10;    console.log('Server: new socket established with ID: ' + socketID);&#10;    send('connection', {'socketID':socketID, 'status':'open'});&#10;    socket.on('message', function(message) {&#10;        send('received', {'socketID':socketID, 'message':message});&#10;    });&#10;    socket.on('close', function(message) {&#10;        send('connection', {'socketID':socketID, 'status':'closed'});&#10;    });&#10;    socket.on('error', function(message) {&#10;        error(message);&#10;    });&#10;&#10;    sockets.push(socket);    &#10;}&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server. */&#10;exports.wrapup = function(){&#10;    for (var i = 0; i &lt; sockets.length; i++) {&#10;        sockets[i].removeAllListeners();&#10;    }&#10;&#10;    sockets = [];&#10;    removeInputHandler(handle); &#10;&#10;    if (server != null) {&#10;        server.removeAllListeners();&#10;        server.close();&#10;        server = null;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/WebSocketServer.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1590.0, 665.0]">
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8090">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="OpMakeKeyValue2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Make a value into a key,value pair.&#10; *&#10; *&#10; *  @accessor OpmakeKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;  var out = {};&#10;  out[key] = i;&#10;&#10;  send('Output', out);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpMakeKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1360.0, 610.0]">
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="battery">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue7" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="robotid">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="1">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1455.0, 610.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpMakeKeyValue3" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Make a value into a key,value pair.&#10; *&#10; *&#10; *  @accessor OpmakeKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;  var out = {};&#10;  out[key] = i;&#10;&#10;  send('Output', out);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpMakeKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1360.0, 725.0]">
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="battery">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue8" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="robotid">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="2">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1455.0, 725.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpMakeKeyValue4" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Make a value into a key,value pair.&#10; *&#10; *&#10; *  @accessor OpmakeKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;  var out = {};&#10;  out[key] = i;&#10;&#10;  send('Output', out);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpMakeKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1360.0, 840.0]">
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="battery">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="OpAddKeyValue9" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Add a key value pair to the input &#10; *&#10; *&#10; *  @accessor OpAddKeyValue&#10; *&#10;*/&#10;&#10;var key;&#10;var val;&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  input('Input');&#10;  output('Output');&#10;&#10;  parameter('Key', {&#10;    type: 'string'&#10;  });&#10;  parameter('Value', {&#10;    type: 'string'&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  key = getParameter('Key');&#10;  val = getParameter('Value');&#10;&#10;  addInputHandler('Input', Input_In);&#10;}&#10;&#10;var Input_In = function () {&#10;  var i = get('Input');&#10;&#10;  i[key] = val;&#10;  send('Output', i);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="../accessors/OpAddKeyValue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="Key" class="ptolemy.data.expr.Parameter" value="robotid">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="Value" class="ptolemy.data.expr.Parameter" value="3">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1455.0, 840.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="Input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
        <port name="Output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
        </port>
    </entity>
    <entity name="MicrostepDelay5" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[630.0, 1135.0]">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="IndexedLocation" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Output a location given an index&#10; *&#10; *&#10; *  @accessor IndexedLocation&#10; *&#10;*/&#10;&#10;var pose = {&#10;  X: 0,&#10;  Y: 0,&#10;  Z: 0.0&#10;};&#10;&#10;var locations = [&#10;  [10, 10],&#10;  [10, 20],&#10;  [20, 20],&#10;];&#10;&#10;var currentIndex = 0;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  output('pose');&#10;&#10;  parameter('SendPosePeriod', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;&#10;  parameter('NewLocationPeriod', {&#10;    type: 'number',&#10;    value: 20&#10;  });&#10;&#10;  parameter('InitialPositionIndex', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;&#10;  parameter('ReverseDirection', {&#10;    type: 'boolean',&#10;    value: false&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  currentIndex = getParameter('InitialPositionIndex');&#10;&#10;  setInterval(function () {&#10;    sendPoseHandler();&#10;  }, getParameter('SendPosePeriod')*1000);&#10;  setInterval(function () {&#10;    newLocationHandler();&#10;  }, getParameter('NewLocationPeriod')*1000);&#10;}&#10;&#10;var newLocationHandler = function() {&#10;  if (getParameter('ReverseDirection')) {&#10;    currentIndex -= 1;&#10;  } else {&#10;    currentIndex += 1;&#10;  }&#10;  currentIndex = currentIndex % locations.length;&#10;}&#10;&#10;var triggerHandler = function() {&#10;  pose.X = locations[currentIndex][0];&#10;  pose.Y = locations[currentIndex][1];&#10;  send('pose', pose);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/ppannuto/code/terraswarm/waitwhat/accessors/IndexedLocation.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[400.0, 640.0]">
        </property>
        <property name="SendPosePeriod" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="NewLocationPeriod" class="ptolemy.data.expr.Parameter" value="20.0">
        </property>
        <property name="InitialPositionIndex" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="ReverseDirection" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="IndexedLocation2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Output a location given an index&#10; *&#10; *&#10; *  @accessor IndexedLocation&#10; *&#10;*/&#10;&#10;var pose = {&#10;  X: 0,&#10;  Y: 0,&#10;  Z: 0.0&#10;};&#10;&#10;var locations = [&#10;  [10, 10],&#10;  [10, 20],&#10;  [20, 20],&#10;];&#10;&#10;var currentIndex = 0;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  output('pose');&#10;&#10;  parameter('SendPosePeriod', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;&#10;  parameter('NewLocationPeriod', {&#10;    type: 'number',&#10;    value: 20&#10;  });&#10;&#10;  parameter('InitialPositionIndex', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;&#10;  parameter('ReverseDirection', {&#10;    type: 'boolean',&#10;    value: false&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  currentIndex = getParameter('InitialPositionIndex');&#10;&#10;  setInterval(function () {&#10;    sendPoseHandler();&#10;  }, getParameter('SendPosePeriod')*1000);&#10;  setInterval(function () {&#10;    newLocationHandler();&#10;  }, getParameter('NewLocationPeriod')*1000);&#10;}&#10;&#10;var newLocationHandler = function() {&#10;  if (getParameter('ReverseDirection')) {&#10;    currentIndex -= 1;&#10;  } else {&#10;    currentIndex += 1;&#10;  }&#10;  currentIndex = currentIndex % locations.length;&#10;}&#10;&#10;var triggerHandler = function() {&#10;  pose.X = locations[currentIndex][0];&#10;  pose.Y = locations[currentIndex][1];&#10;  send('pose', pose);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/ppannuto/code/terraswarm/waitwhat/accessors/IndexedLocation.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[400.0, 690.0]">
        </property>
        <property name="SendPosePeriod" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="NewLocationPeriod" class="ptolemy.data.expr.Parameter" value="20.0">
        </property>
        <property name="InitialPositionIndex" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="ReverseDirection" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="IndexedLocation3" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Output a location given an index&#10; *&#10; *&#10; *  @accessor IndexedLocation&#10; *&#10;*/&#10;&#10;var pose = {&#10;  X: 0,&#10;  Y: 0,&#10;  Z: 0.0&#10;};&#10;&#10;var locations = [&#10;  [10, 10],&#10;  [10, 20],&#10;  [20, 20],&#10;];&#10;&#10;var currentIndex = 0;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  output('pose');&#10;&#10;  parameter('SendPosePeriod', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;&#10;  parameter('NewLocationPeriod', {&#10;    type: 'number',&#10;    value: 20&#10;  });&#10;&#10;  parameter('InitialPositionIndex', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;&#10;  parameter('ReverseDirection', {&#10;    type: 'boolean',&#10;    value: false&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  currentIndex = getParameter('InitialPositionIndex');&#10;&#10;  setInterval(function () {&#10;    sendPoseHandler();&#10;  }, getParameter('SendPosePeriod')*1000);&#10;  setInterval(function () {&#10;    newLocationHandler();&#10;  }, getParameter('NewLocationPeriod')*1000);&#10;}&#10;&#10;var newLocationHandler = function() {&#10;  if (getParameter('ReverseDirection')) {&#10;    currentIndex -= 1;&#10;  } else {&#10;    currentIndex += 1;&#10;  }&#10;  currentIndex = currentIndex % locations.length;&#10;}&#10;&#10;var triggerHandler = function() {&#10;  pose.X = locations[currentIndex][0];&#10;  pose.Y = locations[currentIndex][1];&#10;  send('pose', pose);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/ppannuto/code/terraswarm/waitwhat/accessors/IndexedLocation.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[400.0, 740.0]">
        </property>
        <property name="SendPosePeriod" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="NewLocationPeriod" class="ptolemy.data.expr.Parameter" value="20.0">
        </property>
        <property name="InitialPositionIndex" class="ptolemy.data.expr.Parameter" value="2.0">
        </property>
        <property name="ReverseDirection" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="IndexedLocation4" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of Michigan&#10;&#10;/** Output a location given an index&#10; *&#10; *&#10; *  @accessor IndexedLocation&#10; *&#10;*/&#10;&#10;var pose = {&#10;  X: 0,&#10;  Y: 0,&#10;  Z: 0.0&#10;};&#10;&#10;var locations = [&#10;  [10, 10],&#10;  [10, 20],&#10;  [20, 20],&#10;];&#10;&#10;var currentIndex = 0;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  //&#10;  // I/O&#10;  //&#10;  output('pose');&#10;&#10;  parameter('SendPosePeriod', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;&#10;  parameter('NewLocationPeriod', {&#10;    type: 'number',&#10;    value: 20&#10;  });&#10;&#10;  parameter('InitialPositionIndex', {&#10;    type: 'number',&#10;    value: 0&#10;  });&#10;&#10;  parameter('ReverseDirection', {&#10;    type: 'boolean',&#10;    value: false&#10;  });&#10;}&#10;&#10;exports.initialize = function () {&#10;  currentIndex = getParameter('InitialPositionIndex');&#10;&#10;  setInterval(function () {&#10;    sendPoseHandler();&#10;  }, getParameter('SendPosePeriod')*1000);&#10;  setInterval(function () {&#10;    newLocationHandler();&#10;  }, getParameter('NewLocationPeriod')*1000);&#10;}&#10;&#10;var newLocationHandler = function() {&#10;  if (getParameter('ReverseDirection')) {&#10;    currentIndex -= 1;&#10;  } else {&#10;    currentIndex += 1;&#10;  }&#10;  currentIndex = currentIndex % locations.length;&#10;}&#10;&#10;var triggerHandler = function() {&#10;  pose.X = locations[currentIndex][0];&#10;  pose.Y = locations[currentIndex][1];&#10;  send('pose', pose);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/ppannuto/code/terraswarm/waitwhat/accessors/IndexedLocation.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[400.0, 790.0]">
        </property>
        <property name="SendPosePeriod" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="NewLocationPeriod" class="ptolemy.data.expr.Parameter" value="20.0">
        </property>
        <property name="InitialPositionIndex" class="ptolemy.data.expr.Parameter" value="3.0">
        </property>
        <property name="ReverseDirection" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="error" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <relation name="relation17" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[830.0, 835.0]">
        </vertex>
    </relation>
    <relation name="relation16" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[575.0, 1085.0]">
        </vertex>
    </relation>
    <relation name="relation13" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[945.0, 500.0]">
        </vertex>
    </relation>
    <relation name="relation20" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[945.0, 850.0]">
        </vertex>
    </relation>
    <relation name="relation26" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[610.0, 550.0]">
        </vertex>
    </relation>
    <relation name="relation23" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation28" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[720.0, 550.0]">
        </vertex>
    </relation>
    <relation name="relation37" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[245.0, 550.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[720.0, 870.0]">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation15" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation18" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation21" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation40" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation43" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation44" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation45" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation46" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation48" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation51" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation52" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation53" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation50" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation55" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[590.0, 1240.0]">
        </vertex>
    </relation>
    <relation name="relation54" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[465.0, 550.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation22" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[955.0, 670.0]">
        </vertex>
    </relation>
    <relation name="relation24" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[965.0, 680.0]">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation47" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation14" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation25" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation27" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation29" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation30" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[1515.0, 665.0]">
        </vertex>
    </relation>
    <relation name="relation31" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation35" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation36" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation38" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation39" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation41" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation42" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation49" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation19" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation32" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation33" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation34" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Scarab.battery" relation="relation27"/>
    <link port="Scarab.location" relation="relation8"/>
    <link port="Scarab.pose" relation="relation2"/>
    <link port="Scarab.cmdvel" relation="relation45"/>
    <link port="Scarab.cancel" relation="relation51"/>
    <link port="CoordinateLinearTransform.Input" relation="relation4"/>
    <link port="CoordinateLinearTransform.Output" relation="relation54"/>
    <link port="Scarab2.battery" relation="relation31"/>
    <link port="Scarab2.location" relation="relation7"/>
    <link port="Scarab2.pose" relation="relation40"/>
    <link port="Scarab2.cmdvel" relation="relation46"/>
    <link port="Scarab2.cancel" relation="relation52"/>
    <link port="WebSocketServer.toSend" relation="relation49"/>
    <link port="WebSocketServer.received" relation="relation16"/>
    <link port="Display6.input" relation="relation17"/>
    <link port="OpKeySwitching.Input" relation="relation28"/>
    <link port="OpKeySwitching.Select" relation="relation17"/>
    <link port="OpKeySwitching.Output0" relation="relation13"/>
    <link port="OpKeySwitching.Output1" relation="relation22"/>
    <link port="OpKeySwitching.Output2" relation="relation24"/>
    <link port="OpKeySwitching.Output3" relation="relation20"/>
    <link port="RoboCafeController.UserChoice" relation="relation16"/>
    <link port="RoboCafeController.SelectPhoneRobot" relation="relation17"/>
    <link port="RoboCafeController.RobotStatus" relation="relation"/>
    <link port="RoboCafeController.Applause" relation="relation55"/>
    <link port="RoboCafeController.AppState" relation="relation42"/>
    <link port="Display7.input" relation="relation16"/>
    <link port="Scarab4.battery" relation="relation36"/>
    <link port="Scarab4.location" relation="relation12"/>
    <link port="Scarab4.pose" relation="relation44"/>
    <link port="Scarab4.cmdvel" relation="relation48"/>
    <link port="Scarab4.cancel" relation="relation53"/>
    <link port="Command2Pose.Command" relation="relation5"/>
    <link port="Command2Pose.Location" relation="relation25"/>
    <link port="Command2Pose.Pose" relation="relation2"/>
    <link port="Command2Pose.CmdVel" relation="relation45"/>
    <link port="Command2Pose.Cancel" relation="relation51"/>
    <link port="Command2Pose2.Command" relation="relation15"/>
    <link port="Command2Pose2.Location" relation="relation3"/>
    <link port="Command2Pose2.Pose" relation="relation40"/>
    <link port="Command2Pose2.CmdVel" relation="relation46"/>
    <link port="Command2Pose2.Cancel" relation="relation52"/>
    <link port="Command2Pose3.Command" relation="relation18"/>
    <link port="Command2Pose3.Location" relation="relation10"/>
    <link port="Command2Pose3.Pose" relation="relation43"/>
    <link port="Command2Pose3.CmdVel" relation="relation11"/>
    <link port="Command2Pose3.Cancel" relation="relation47"/>
    <link port="Command2Pose4.Command" relation="relation21"/>
    <link port="Command2Pose4.Location" relation="relation9"/>
    <link port="Command2Pose4.Pose" relation="relation44"/>
    <link port="Command2Pose4.CmdVel" relation="relation48"/>
    <link port="Command2Pose4.Cancel" relation="relation53"/>
    <link port="Location2Command.Location" relation="relation26"/>
    <link port="Location2Command.Command" relation="relation28"/>
    <link port="Scarab3.battery" relation="relation35"/>
    <link port="Scarab3.location" relation="relation14"/>
    <link port="Scarab3.pose" relation="relation43"/>
    <link port="Scarab3.cmdvel" relation="relation11"/>
    <link port="Scarab3.cancel" relation="relation47"/>
    <link port="OpAddKeyValue.Input" relation="relation19"/>
    <link port="OpAddKeyValue.Output" relation="relation26"/>
    <link port="ConstantKeyValue.kv" relation="relation23"/>
    <link port="OpAddKeyValue2.Input" relation="relation23"/>
    <link port="OpAddKeyValue2.Output" relation="relation6"/>
    <link port="WebSocketServer2.received" relation="relation37"/>
    <link port="Display9.input" relation="relation37"/>
    <link port="OpStrip.Input" relation="relation37"/>
    <link port="OpStrip.Output" relation="relation4"/>
    <link port="ContainerLocation.LocationIn" relation="relation54"/>
    <link port="ContainerLocation.LocationOut" relation="relation26"/>
    <link port="GoCommandFilter.CommandIn" relation="relation13"/>
    <link port="GoCommandFilter.CommandOut" relation="relation5"/>
    <link port="GoCommandFilter2.CommandIn" relation="relation22"/>
    <link port="GoCommandFilter2.CommandOut" relation="relation15"/>
    <link port="GoCommandFilter3.CommandIn" relation="relation24"/>
    <link port="GoCommandFilter3.CommandOut" relation="relation18"/>
    <link port="GoCommandFilter4.CommandIn" relation="relation20"/>
    <link port="GoCommandFilter4.CommandOut" relation="relation21"/>
    <link port="WebSocketServer3.received" relation="relation50"/>
    <link port="OpStrip2.Input" relation="relation50"/>
    <link port="OpStrip2.Output" relation="relation55"/>
    <link port="Display14.input" relation="relation55"/>
    <link port="OpAddKeyValue3.Input" relation="relation32"/>
    <link port="OpAddKeyValue3.Output" relation="relation26"/>
    <link port="OpAddKeyValue4.Input" relation="relation33"/>
    <link port="OpAddKeyValue4.Output" relation="relation26"/>
    <link port="OpAddKeyValue5.Input" relation="relation34"/>
    <link port="OpAddKeyValue5.Output" relation="relation26"/>
    <link port="LocationRosPublisher.toSend" relation="relation54"/>
    <link port="MicrostepDelay.input" relation="relation8"/>
    <link port="MicrostepDelay.output" relation="relation25"/>
    <link port="MicrostepDelay2.input" relation="relation7"/>
    <link port="MicrostepDelay2.output" relation="relation3"/>
    <link port="MicrostepDelay3.input" relation="relation14"/>
    <link port="MicrostepDelay3.output" relation="relation10"/>
    <link port="MicrostepDelay4.input" relation="relation12"/>
    <link port="MicrostepDelay4.output" relation="relation9"/>
    <link port="WebSocketServer4.toSend" relation="relation"/>
    <link port="OpMakeKeyValue.Input" relation="relation27"/>
    <link port="OpMakeKeyValue.Output" relation="relation29"/>
    <link port="OpAddKeyValue6.Input" relation="relation29"/>
    <link port="OpAddKeyValue6.Output" relation="relation30"/>
    <link port="WebSocketServer5.toSend" relation="relation30"/>
    <link port="OpMakeKeyValue2.Input" relation="relation31"/>
    <link port="OpMakeKeyValue2.Output" relation="relation39"/>
    <link port="OpAddKeyValue7.Input" relation="relation39"/>
    <link port="OpAddKeyValue7.Output" relation="relation30"/>
    <link port="OpMakeKeyValue3.Input" relation="relation35"/>
    <link port="OpMakeKeyValue3.Output" relation="relation38"/>
    <link port="OpAddKeyValue8.Input" relation="relation38"/>
    <link port="OpAddKeyValue8.Output" relation="relation30"/>
    <link port="OpMakeKeyValue4.Input" relation="relation36"/>
    <link port="OpMakeKeyValue4.Output" relation="relation41"/>
    <link port="OpAddKeyValue9.Input" relation="relation41"/>
    <link port="OpAddKeyValue9.Output" relation="relation30"/>
    <link port="MicrostepDelay5.input" relation="relation42"/>
    <link port="MicrostepDelay5.output" relation="relation49"/>
    <link port="IndexedLocation.pose" relation="relation19"/>
    <link port="IndexedLocation2.pose" relation="relation32"/>
    <link port="IndexedLocation3.pose" relation="relation33"/>
    <link port="IndexedLocation4.pose" relation="relation34"/>
    <link relation1="relation28" relation2="relation6"/>
</entity>
