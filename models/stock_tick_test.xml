<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="stock_tick_test" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{135, 95}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={373, 208, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{340.0, 252.0}">
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="5">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{120, 235}">
        </property>
    </entity>
    <entity name="StockTick" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Retrieve a stock price from a Yahoo server.&#10; *  This accessor reacts to a *symbol* input by issuing a query to a web server&#10; *  for the most recent trade prices of the common stock whose symbol is given&#10; *  by the input. When the server replies, this accessor produces the most&#10; *  recent trade price on the *price* output.&#10; *&#10; *  The request to the web server is asynchronous. This means that the outputs&#10; *  may not be produced in the same order as the inputs.&#10; *  FIXME: This is seriously problematic. Probably should change this to use&#10; *  a blocking call by default.&#10; *&#10; *  This accessor requires the optional 'httpClient' module, which may or may&#10; *  not be provided by an accessor host. Most hosts will provide this module.&#10; *&#10; *  @accessor StockTick&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id: StockTick.js 194 2015-06-23 22:04:00Z eal $$&#10; *  @input {string} symbol The stock symbol. Default value is 'YHOO'.&#10; *  @output {number} price The most recent trade price for the stock.&#10; */&#10;var http = require('httpClient');&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    input('symbol', {&#10;        'value':'YHOO',&#10;        'type':'string'&#10;    });&#10;    output('price', {&#10;        'type':'number'&#10;    });&#10;};&#10;&#10;/** Function that retrieves the stock price.&#10; */&#10;function getPrice() {&#10;    // Read the current value of the 'symbol' input.&#10;    var stock = get('symbol');&#10;    // Construct a URL to obtain a stock price.&#10;    var url = &quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22&quot;&#10;        + stock&#10;        + &quot;%22)%0A%09%09&amp;env=http%3A%2F%2Fdatatables.org%2Falltables.env&amp;format=json&quot;;&#10;    // Request a stock price, and provide a function to handle the response.&#10;    http.get(url, function(response) {&#10;        // Assuming the response is JSON, parse it.&#10;        console.log('GOT THIS OK')&#10;        console.log(typeof response.body)&#10;        console.log('DID WE GET IT')&#10;        var json = JSON.parse(response.body);&#10;        // Extract the last trade price from the JSON record.&#10;        var price = parseFloat(json.query.results.quote.LastTradePriceOnly);&#10;        // Send the price to the 'price' output.&#10;        send('price', price);&#10;    });&#10;}&#10;&#10;var handle = null;&#10;&#10;/** Initialize the accessor by attaching an input handler to the *symbol* input. */&#10;exports.initialize = function() {&#10;    // Invoke the getPrice function each time a 'symbol' input arrives.&#10;    handle = addInputHandler('symbol', getPrice);&#10;}&#10;&#10;/** Remove the input handler. */&#10;exports.wrapup = function() {&#10;    // Failing to do this will likely trigger an exception when the model stops running,&#10;    // because the getPrice() function will attempt to send an output after the model&#10;    // has stopped.&#10;    removeInputHandler(handle, 'symbol');&#10;}&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/Users/bradjc/svn/accessors/web/StockTick.js">
        </property>
        <property name="symbol" class="ptolemy.actor.parameters.PortParameter" value="&quot;MSFT&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{350.0, 262.0}">
        </property>
        <port name="symbol" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="price" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <entity name="StringConst" class="ptolemy.actor.lib.StringConst">
        <property name="value" class="ptolemy.data.expr.Parameter" value="MSFT">
        </property>
        <doc>Create a constant sequence with a string value.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="80">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{210, 340}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{495, 295}">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation2"/>
    <link port="StockTick.symbol" relation="relation"/>
    <link port="StockTick.price" relation="relation3"/>
    <link port="StringConst.output" relation="relation"/>
    <link port="StringConst.trigger" relation="relation2"/>
    <link port="Display.input" relation="relation3"/>
</entity>
